
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00003b36  00003bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800190  00800190  00003cfa  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  00003cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b781  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d77c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <main>
      8a:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e8       	ldi	r22, 0x86	; 134
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 57       	subi	r30, 0x72	; 114
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
/*
 * Description :
 * initialize the ADC with no interrupts
 */
void ADC_init(const ADC_ConfigType* Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* choose voltage reference voltage */
	ADMUX=(Config_Ptr->ref_volt<<6);
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	82 95       	swap	r24
     e48:	88 0f       	add	r24, r24
     e4a:	88 0f       	add	r24, r24
     e4c:	80 7c       	andi	r24, 0xC0	; 192
     e4e:	8c 93       	st	X, r24
	/* enable ADC and set prescaler */
	ADCSRA=(1<<ADEN)|(Config_Ptr->prescaler);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <ADC_readChannel>:
/*
 * Description :
 *	read analog value from specified channel and convert it to digital
 */
uint16 ADC_readChannel(uint8 ch_num)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
	/* choosing the channel */
	ADMUX=(ADMUX & 0xE0) | (0x1F & ch_num);
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e2       	ldi	r30, 0x27	; 39
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	98 2f       	mov	r25, r24
     e80:	90 7e       	andi	r25, 0xE0	; 224
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	8f 71       	andi	r24, 0x1F	; 31
     e86:	89 2b       	or	r24, r25
     e88:	8c 93       	st	X, r24
	/* start ADC conversion */
	SET_BIT(ADCSRA, ADSC);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 64       	ori	r24, 0x40	; 64
     e96:	8c 93       	st	X, r24
	/* waiting for conversion to finish */
	while(BIT_IS_CLEAR(ADCSRA, ADIF));
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	80 71       	andi	r24, 0x10	; 16
     ea4:	90 70       	andi	r25, 0x00	; 0
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	b9 f3       	breq	.-18     	; 0xe98 <ADC_readChannel+0x30>
	/* clear interrupt flag */
	SET_BIT(ADCSRA, ADIF);
     eaa:	a6 e2       	ldi	r26, 0x26	; 38
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	80 61       	ori	r24, 0x10	; 16
     eb6:	8c 93       	st	X, r24
	/* return converted data */
	return ADC;
     eb8:	e4 e2       	ldi	r30, 0x24	; 36
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
}
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <DcMotor_init>:
/*
 * Description :
 * setup the direction for the two motor pins through the GPIO driver
 */
void DcMotor_init(void)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	/* set motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, PIN_OUTPUT);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, PIN_OUTPUT);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	/* stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DcMotor_Rotate>:
 * Description :
 * a function to choose motor state(ON/OFF, clock wise / anti clock wise)
 * and control speed
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <DcMotor_Rotate+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DcMotor_Rotate+0x8>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3c 83       	std	Y+4, r19	; 0x04
     f16:	2b 83       	std	Y+3, r18	; 0x03
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	a1 f0       	breq	.+40     	; 0xf4a <DcMotor_Rotate+0x4c>
     f22:	2b 81       	ldd	r18, Y+3	; 0x03
     f24:	3c 81       	ldd	r19, Y+4	; 0x04
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <DcMotor_Rotate+0x62>
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	01 f5       	brne	.+64     	; 0xf74 <DcMotor_Rotate+0x76>
	{
	case STOP :
		/* stop motor */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
     f48:	15 c0       	rjmp	.+42     	; 0xf74 <DcMotor_Rotate+0x76>
		break;
	case CW :
		/* rotate clock wise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_HIGH);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
     f5e:	0a c0       	rjmp	.+20     	; 0xf74 <DcMotor_Rotate+0x76>
		break;
	case A_CW :
		/* rotate anti clock wise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_HIGH);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <PWM_Timer0_Start>
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <GPIO_setupPinDirection+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <GPIO_setupPinDirection+0x8>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	6a 83       	std	Y+2, r22	; 0x02
     f9a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	88 30       	cpi	r24, 0x08	; 8
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <GPIO_setupPinDirection+0x1c>
     fa2:	d5 c0       	rjmp	.+426    	; 0x114e <GPIO_setupPinDirection+0x1c6>
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	08 f0       	brcs	.+2      	; 0xfac <GPIO_setupPinDirection+0x24>
     faa:	d1 c0       	rjmp	.+418    	; 0x114e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	3d 83       	std	Y+5, r19	; 0x05
     fb4:	2c 83       	std	Y+4, r18	; 0x04
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <GPIO_setupPinDirection+0x3a>
     fc0:	43 c0       	rjmp	.+134    	; 0x1048 <GPIO_setupPinDirection+0xc0>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <GPIO_setupPinDirection+0x4e>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	71 f0       	breq	.+28     	; 0xff0 <GPIO_setupPinDirection+0x68>
     fd4:	bc c0       	rjmp	.+376    	; 0x114e <GPIO_setupPinDirection+0x1c6>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <GPIO_setupPinDirection+0x5a>
     fe0:	5f c0       	rjmp	.+190    	; 0x10a0 <GPIO_setupPinDirection+0x118>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <GPIO_setupPinDirection+0x66>
     fec:	85 c0       	rjmp	.+266    	; 0x10f8 <GPIO_setupPinDirection+0x170>
     fee:	af c0       	rjmp	.+350    	; 0x114e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ff6:	aa e3       	ldi	r26, 0x3A	; 58
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ea e3       	ldi	r30, 0x3A	; 58
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_setupPinDirection+0x8c>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_setupPinDirection+0x88>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	98 c0       	rjmp	.+304    	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    101e:	aa e3       	ldi	r26, 0x3A	; 58
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e3       	ldi	r30, 0x3A	; 58
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0xb4>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0xb0>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	83 c0       	rjmp	.+262    	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	a1 f4       	brne	.+40     	; 0x1076 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    104e:	a7 e3       	ldi	r26, 0x37	; 55
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e7 e3       	ldi	r30, 0x37	; 55
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_setupPinDirection+0xe4>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_setupPinDirection+0xe0>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	6c c0       	rjmp	.+216    	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_setupPinDirection+0x10c>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_setupPinDirection+0x108>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	57 c0       	rjmp	.+174    	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	a1 f4       	brne	.+40     	; 0x10ce <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10a6:	a4 e3       	ldi	r26, 0x34	; 52
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e4 e3       	ldi	r30, 0x34	; 52
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_setupPinDirection+0x13c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_setupPinDirection+0x138>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	40 c0       	rjmp	.+128    	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <GPIO_setupPinDirection+0x164>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <GPIO_setupPinDirection+0x160>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	2b c0       	rjmp	.+86     	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	a1 f4       	brne	.+40     	; 0x1126 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10fe:	a1 e3       	ldi	r26, 0x31	; 49
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e1 e3       	ldi	r30, 0x31	; 49
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_setupPinDirection+0x194>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_setupPinDirection+0x190>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	14 c0       	rjmp	.+40     	; 0x114e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1126:	a1 e3       	ldi	r26, 0x31	; 49
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e1 e3       	ldi	r30, 0x31	; 49
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_setupPinDirection+0x1bc>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_setupPinDirection+0x1b8>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <GPIO_writePin+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <GPIO_writePin+0x8>
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	6a 83       	std	Y+2, r22	; 0x02
    1170:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	88 30       	cpi	r24, 0x08	; 8
    1176:	08 f0       	brcs	.+2      	; 0x117a <GPIO_writePin+0x1c>
    1178:	d5 c0       	rjmp	.+426    	; 0x1324 <GPIO_writePin+0x1c6>
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	08 f0       	brcs	.+2      	; 0x1182 <GPIO_writePin+0x24>
    1180:	d1 c0       	rjmp	.+418    	; 0x1324 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	2c 83       	std	Y+4, r18	; 0x04
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <GPIO_writePin+0x3a>
    1196:	43 c0       	rjmp	.+134    	; 0x121e <GPIO_writePin+0xc0>
    1198:	2c 81       	ldd	r18, Y+4	; 0x04
    119a:	3d 81       	ldd	r19, Y+5	; 0x05
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <GPIO_writePin+0x4e>
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	9d 81       	ldd	r25, Y+5	; 0x05
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	71 f0       	breq	.+28     	; 0x11c6 <GPIO_writePin+0x68>
    11aa:	bc c0       	rjmp	.+376    	; 0x1324 <GPIO_writePin+0x1c6>
    11ac:	2c 81       	ldd	r18, Y+4	; 0x04
    11ae:	3d 81       	ldd	r19, Y+5	; 0x05
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <GPIO_writePin+0x5a>
    11b6:	5f c0       	rjmp	.+190    	; 0x1276 <GPIO_writePin+0x118>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <GPIO_writePin+0x66>
    11c2:	85 c0       	rjmp	.+266    	; 0x12ce <GPIO_writePin+0x170>
    11c4:	af c0       	rjmp	.+350    	; 0x1324 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11cc:	ab e3       	ldi	r26, 0x3B	; 59
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb e3       	ldi	r30, 0x3B	; 59
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_writePin+0x8c>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_writePin+0x88>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	98 c0       	rjmp	.+304    	; 0x1324 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11f4:	ab e3       	ldi	r26, 0x3B	; 59
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e3       	ldi	r30, 0x3B	; 59
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0xb4>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0xb0>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	83 c0       	rjmp	.+262    	; 0x1324 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	a1 f4       	brne	.+40     	; 0x124c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_writePin+0xe4>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_writePin+0xe0>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	6c c0       	rjmp	.+216    	; 0x1324 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_writePin+0x10c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_writePin+0x108>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	57 c0       	rjmp	.+174    	; 0x1324 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    127c:	a5 e3       	ldi	r26, 0x35	; 53
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e3       	ldi	r30, 0x35	; 53
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_writePin+0x13c>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_writePin+0x138>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	40 c0       	rjmp	.+128    	; 0x1324 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_writePin+0x164>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_writePin+0x160>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	2b c0       	rjmp	.+86     	; 0x1324 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12d4:	a2 e3       	ldi	r26, 0x32	; 50
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e2 e3       	ldi	r30, 0x32	; 50
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_writePin+0x194>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_writePin+0x190>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12fc:	a2 e3       	ldi	r26, 0x32	; 50
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e2 e3       	ldi	r30, 0x32	; 50
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <GPIO_writePin+0x1bc>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <GPIO_writePin+0x1b8>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <GPIO_readPin+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_readPin+0x8>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1346:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 30       	cpi	r24, 0x08	; 8
    134c:	08 f0       	brcs	.+2      	; 0x1350 <GPIO_readPin+0x1c>
    134e:	84 c0       	rjmp	.+264    	; 0x1458 <GPIO_readPin+0x124>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	08 f0       	brcs	.+2      	; 0x1358 <GPIO_readPin+0x24>
    1356:	80 c0       	rjmp	.+256    	; 0x1458 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 83       	std	Y+5, r19	; 0x05
    1360:	2c 83       	std	Y+4, r18	; 0x04
    1362:	4c 81       	ldd	r20, Y+4	; 0x04
    1364:	5d 81       	ldd	r21, Y+5	; 0x05
    1366:	41 30       	cpi	r20, 0x01	; 1
    1368:	51 05       	cpc	r21, r1
    136a:	79 f1       	breq	.+94     	; 0x13ca <GPIO_readPin+0x96>
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	34 f4       	brge	.+12     	; 0x1382 <GPIO_readPin+0x4e>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	69 f0       	breq	.+26     	; 0x139a <GPIO_readPin+0x66>
    1380:	6b c0       	rjmp	.+214    	; 0x1458 <GPIO_readPin+0x124>
    1382:	4c 81       	ldd	r20, Y+4	; 0x04
    1384:	5d 81       	ldd	r21, Y+5	; 0x05
    1386:	42 30       	cpi	r20, 0x02	; 2
    1388:	51 05       	cpc	r21, r1
    138a:	b9 f1       	breq	.+110    	; 0x13fa <GPIO_readPin+0xc6>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <GPIO_readPin+0x64>
    1396:	49 c0       	rjmp	.+146    	; 0x142a <GPIO_readPin+0xf6>
    1398:	5f c0       	rjmp	.+190    	; 0x1458 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_readPin+0x7e>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_readPin+0x7a>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	88 23       	and	r24, r24
    13be:	19 f0       	breq	.+6      	; 0x13c6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	49 c0       	rjmp	.+146    	; 0x1458 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13c6:	19 82       	std	Y+1, r1	; 0x01
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13ca:	e6 e3       	ldi	r30, 0x36	; 54
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 2f       	mov	r24, r24
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a9 01       	movw	r20, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_readPin+0xae>
    13de:	55 95       	asr	r21
    13e0:	47 95       	ror	r20
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_readPin+0xaa>
    13e6:	ca 01       	movw	r24, r20
    13e8:	81 70       	andi	r24, 0x01	; 1
    13ea:	90 70       	andi	r25, 0x00	; 0
    13ec:	88 23       	and	r24, r24
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	31 c0       	rjmp	.+98     	; 0x1458 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13f6:	19 82       	std	Y+1, r1	; 0x01
    13f8:	2f c0       	rjmp	.+94     	; 0x1458 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13fa:	e3 e3       	ldi	r30, 0x33	; 51
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a9 01       	movw	r20, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_readPin+0xde>
    140e:	55 95       	asr	r21
    1410:	47 95       	ror	r20
    1412:	8a 95       	dec	r24
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_readPin+0xda>
    1416:	ca 01       	movw	r24, r20
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	88 23       	and	r24, r24
    141e:	19 f0       	breq	.+6      	; 0x1426 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	19 c0       	rjmp	.+50     	; 0x1458 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	17 c0       	rjmp	.+46     	; 0x1458 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    142a:	e0 e3       	ldi	r30, 0x30	; 48
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_readPin+0x10e>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_readPin+0x10a>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	88 23       	and	r24, r24
    144e:	19 f0       	breq	.+6      	; 0x1456 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1456:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_setupPortDirection+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_setupPortDirection+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	90 f5       	brcc	.+100    	; 0x14e4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3c 83       	std	Y+4, r19	; 0x04
    1488:	2b 83       	std	Y+3, r18	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	d1 f0       	breq	.+52     	; 0x14c8 <GPIO_setupPortDirection+0x5e>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <GPIO_setupPortDirection+0x3e>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 f0       	breq	.+24     	; 0x14be <GPIO_setupPortDirection+0x54>
    14a6:	1e c0       	rjmp	.+60     	; 0x14e4 <GPIO_setupPortDirection+0x7a>
    14a8:	2b 81       	ldd	r18, Y+3	; 0x03
    14aa:	3c 81       	ldd	r19, Y+4	; 0x04
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <GPIO_setupPortDirection+0x68>
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <GPIO_setupPortDirection+0x72>
    14bc:	13 c0       	rjmp	.+38     	; 0x14e4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14be:	ea e3       	ldi	r30, 0x3A	; 58
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	0e c0       	rjmp	.+28     	; 0x14e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14c8:	e7 e3       	ldi	r30, 0x37	; 55
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14d2:	e4 e3       	ldi	r30, 0x34	; 52
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14dc:	e1 e3       	ldi	r30, 0x31	; 49
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_writePort+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_writePort+0x8>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	84 30       	cpi	r24, 0x04	; 4
    1506:	90 f5       	brcc	.+100    	; 0x156c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3c 83       	std	Y+4, r19	; 0x04
    1510:	2b 83       	std	Y+3, r18	; 0x03
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	d1 f0       	breq	.+52     	; 0x1550 <GPIO_writePort+0x5e>
    151c:	2b 81       	ldd	r18, Y+3	; 0x03
    151e:	3c 81       	ldd	r19, Y+4	; 0x04
    1520:	22 30       	cpi	r18, 0x02	; 2
    1522:	31 05       	cpc	r19, r1
    1524:	2c f4       	brge	.+10     	; 0x1530 <GPIO_writePort+0x3e>
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	61 f0       	breq	.+24     	; 0x1546 <GPIO_writePort+0x54>
    152e:	1e c0       	rjmp	.+60     	; 0x156c <GPIO_writePort+0x7a>
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	3c 81       	ldd	r19, Y+4	; 0x04
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <GPIO_writePort+0x68>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <GPIO_writePort+0x72>
    1544:	13 c0       	rjmp	.+38     	; 0x156c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1546:	eb e3       	ldi	r30, 0x3B	; 59
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	80 83       	st	Z, r24
    154e:	0e c0       	rjmp	.+28     	; 0x156c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1550:	e8 e3       	ldi	r30, 0x38	; 56
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	09 c0       	rjmp	.+18     	; 0x156c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
    1562:	04 c0       	rjmp	.+8      	; 0x156c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1564:	e2 e3       	ldi	r30, 0x32	; 50
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
			break;
		}
	}
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_readPort+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <GPIO_readPort+0x8>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1588:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	90 f5       	brcc	.+100    	; 0x15f4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3c 83       	std	Y+4, r19	; 0x04
    1598:	2b 83       	std	Y+3, r18	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	d1 f0       	breq	.+52     	; 0x15d8 <GPIO_readPort+0x5e>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <GPIO_readPort+0x3e>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 f0       	breq	.+24     	; 0x15ce <GPIO_readPort+0x54>
    15b6:	1e c0       	rjmp	.+60     	; 0x15f4 <GPIO_readPort+0x7a>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	81 f0       	breq	.+32     	; 0x15e2 <GPIO_readPort+0x68>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <GPIO_readPort+0x72>
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15ce:	e9 e3       	ldi	r30, 0x39	; 57
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	0e c0       	rjmp	.+28     	; 0x15f4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15d8:	e6 e3       	ldi	r30, 0x36	; 54
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15e2:	e3 e3       	ldi	r30, 0x33	; 51
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15ec:	e0 e3       	ldi	r30, 0x30	; 48
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <LCD_init>:
 * initialize the LCD ports
 * configure 2 lines 8 bit mode
 * clear the screen and disable cursor
 */
void LCD_init(void)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	2e 97       	sbiw	r28, 0x0e	; 14
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
	/* configure RS pin output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	/* configure enable pin output */
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	/* choose 2 lines 8 bits mode */
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	/* configure data pins output for 8 bit operations */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, PIN_OUTPUT);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, PIN_OUTPUT);
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	64 e0       	ldi	r22, 0x04	; 4
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, PIN_OUTPUT);
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	65 e0       	ldi	r22, 0x05	; 5
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, PIN_OUTPUT);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	66 e0       	ldi	r22, 0x06	; 6
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>

	/* send 4 bits initialization */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
    1654:	83 e3       	ldi	r24, 0x33	; 51
    1656:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
    165a:	82 e3       	ldi	r24, 0x32	; 50
    165c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	/* choose 2 lines 4 bits mode */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE);
    1660:	88 e2       	ldi	r24, 0x28	; 40
    1662:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 ea       	ldi	r26, 0xA0	; 160
    166c:	b1 e4       	ldi	r27, 0x41	; 65
    166e:	8b 87       	std	Y+11, r24	; 0x0b
    1670:	9c 87       	std	Y+12, r25	; 0x0c
    1672:	ad 87       	std	Y+13, r26	; 0x0d
    1674:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1676:	6b 85       	ldd	r22, Y+11	; 0x0b
    1678:	7c 85       	ldd	r23, Y+12	; 0x0c
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a e7       	ldi	r20, 0x7A	; 122
    1684:	55 e4       	ldi	r21, 0x45	; 69
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	8f 83       	std	Y+7, r24	; 0x07
    1690:	98 87       	std	Y+8, r25	; 0x08
    1692:	a9 87       	std	Y+9, r26	; 0x09
    1694:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <LCD_init+0xb4>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <LCD_init+0x132>
	else if (__tmp > 65535)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	4c f5       	brge	.+82     	; 0x1722 <LCD_init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <LCD_init+0x114>
    16fa:	80 e9       	ldi	r24, 0x90	; 144
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_init+0x102>
    170a:	9c 83       	std	Y+4, r25	; 0x04
    170c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9e 83       	std	Y+6, r25	; 0x06
    1716:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
    171a:	9e 81       	ldd	r25, Y+6	; 0x06
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	69 f7       	brne	.-38     	; 0x16fa <LCD_init+0xf6>
    1720:	14 c0       	rjmp	.+40     	; 0x174a <LCD_init+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_init+0x13e>
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(20);
	LCD_sendCommand(LCD_DISABLE_CURSOR);
    174a:	8c e0       	ldi	r24, 0x0C	; 12
    174c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
}
    1756:	2e 96       	adiw	r28, 0x0e	; 14
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_sendCommand>:
/*
 * Description :
 * send a command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	c3 56       	subi	r28, 0x63	; 99
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	fe 01       	movw	r30, r28
    1784:	ed 59       	subi	r30, 0x9D	; 157
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 83       	st	Z, r24
	/* set RS to low to send a command */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1794:	fe 01       	movw	r30, r28
    1796:	e1 5a       	subi	r30, 0xA1	; 161
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	80 83       	st	Z, r24
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	a2 83       	std	Z+2, r26	; 0x02
    17a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	8e 01       	movw	r16, r28
    17ac:	05 5a       	subi	r16, 0xA5	; 165
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	fe 01       	movw	r30, r28
    17b2:	e1 5a       	subi	r30, 0xA1	; 161
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	55 e4       	ldi	r21, 0x45	; 69
    17c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	f8 01       	movw	r30, r16
    17d0:	80 83       	st	Z, r24
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	a2 83       	std	Z+2, r26	; 0x02
    17d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d8:	fe 01       	movw	r30, r28
    17da:	e5 5a       	subi	r30, 0xA5	; 165
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	44 f4       	brge	.+16     	; 0x1806 <LCD_sendCommand+0x9e>
		__ticks = 1;
    17f6:	fe 01       	movw	r30, r28
    17f8:	e7 5a       	subi	r30, 0xA7	; 167
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	64 c0       	rjmp	.+200    	; 0x18ce <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1806:	fe 01       	movw	r30, r28
    1808:	e5 5a       	subi	r30, 0xA5	; 165
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	0c f0       	brlt	.+2      	; 0x1826 <LCD_sendCommand+0xbe>
    1824:	43 c0       	rjmp	.+134    	; 0x18ac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1826:	fe 01       	movw	r30, r28
    1828:	e1 5a       	subi	r30, 0xA1	; 161
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8e 01       	movw	r16, r28
    1846:	07 5a       	subi	r16, 0xA7	; 167
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	80 83       	st	Z, r24
    185c:	1f c0       	rjmp	.+62     	; 0x189c <LCD_sendCommand+0x134>
    185e:	fe 01       	movw	r30, r28
    1860:	e9 5a       	subi	r30, 0xA9	; 169
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 e9       	ldi	r24, 0x90	; 144
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
    186c:	fe 01       	movw	r30, r28
    186e:	e9 5a       	subi	r30, 0xA9	; 169
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_sendCommand+0x10e>
    187a:	fe 01       	movw	r30, r28
    187c:	e9 5a       	subi	r30, 0xA9	; 169
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	de 01       	movw	r26, r28
    1886:	a7 5a       	subi	r26, 0xA7	; 167
    1888:	bf 4f       	sbci	r27, 0xFF	; 255
    188a:	fe 01       	movw	r30, r28
    188c:	e7 5a       	subi	r30, 0xA7	; 167
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	fe 01       	movw	r30, r28
    189e:	e7 5a       	subi	r30, 0xA7	; 167
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	d1 f6       	brne	.-76     	; 0x185e <LCD_sendCommand+0xf6>
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	8e 01       	movw	r16, r28
    18ae:	07 5a       	subi	r16, 0xA7	; 167
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	fe 01       	movw	r30, r28
    18b4:	e5 5a       	subi	r30, 0xA5	; 165
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	de 01       	movw	r26, r28
    18d0:	ab 5a       	subi	r26, 0xAB	; 171
    18d2:	bf 4f       	sbci	r27, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5a       	subi	r30, 0xA7	; 167
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	8d 93       	st	X+, r24
    18e0:	9c 93       	st	X, r25
    18e2:	fe 01       	movw	r30, r28
    18e4:	eb 5a       	subi	r30, 0xAB	; 171
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0x184>
    18f0:	fe 01       	movw	r30, r28
    18f2:	eb 5a       	subi	r30, 0xAB	; 171
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1904:	fe 01       	movw	r30, r28
    1906:	ef 5a       	subi	r30, 0xAF	; 175
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	8e 01       	movw	r16, r28
    191c:	03 5b       	subi	r16, 0xB3	; 179
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	fe 01       	movw	r30, r28
    1922:	ef 5a       	subi	r30, 0xAF	; 175
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a e7       	ldi	r20, 0x7A	; 122
    1934:	55 e4       	ldi	r21, 0x45	; 69
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	80 83       	st	Z, r24
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	a2 83       	std	Z+2, r26	; 0x02
    1946:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1948:	fe 01       	movw	r30, r28
    194a:	e3 5b       	subi	r30, 0xB3	; 179
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	44 f4       	brge	.+16     	; 0x1976 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1966:	fe 01       	movw	r30, r28
    1968:	e5 5b       	subi	r30, 0xB5	; 181
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	64 c0       	rjmp	.+200    	; 0x1a3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1976:	fe 01       	movw	r30, r28
    1978:	e3 5b       	subi	r30, 0xB3	; 179
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	0c f0       	brlt	.+2      	; 0x1996 <LCD_sendCommand+0x22e>
    1994:	43 c0       	rjmp	.+134    	; 0x1a1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	fe 01       	movw	r30, r28
    1998:	ef 5a       	subi	r30, 0xAF	; 175
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8e 01       	movw	r16, r28
    19b6:	05 5b       	subi	r16, 0xB5	; 181
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	1f c0       	rjmp	.+62     	; 0x1a0c <LCD_sendCommand+0x2a4>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e7 5b       	subi	r30, 0xB7	; 183
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	fe 01       	movw	r30, r28
    19de:	e7 5b       	subi	r30, 0xB7	; 183
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_sendCommand+0x27e>
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5b       	subi	r30, 0xB7	; 183
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	de 01       	movw	r26, r28
    19f6:	a5 5b       	subi	r26, 0xB5	; 181
    19f8:	bf 4f       	sbci	r27, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 5b       	subi	r30, 0xB5	; 181
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	11 96       	adiw	r26, 0x01	; 1
    1a08:	9c 93       	st	X, r25
    1a0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5b       	subi	r30, 0xB5	; 181
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	d1 f6       	brne	.-76     	; 0x19ce <LCD_sendCommand+0x266>
    1a1a:	27 c0       	rjmp	.+78     	; 0x1a6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1c:	8e 01       	movw	r16, r28
    1a1e:	05 5b       	subi	r16, 0xB5	; 181
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	e3 5b       	subi	r30, 0xB3	; 179
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	de 01       	movw	r26, r28
    1a40:	a9 5b       	subi	r26, 0xB9	; 185
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 5b       	subi	r30, 0xB5	; 181
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	8d 93       	st	X+, r24
    1a50:	9c 93       	st	X, r25
    1a52:	fe 01       	movw	r30, r28
    1a54:	e9 5b       	subi	r30, 0xB9	; 185
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_sendCommand+0x2f4>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e9 5b       	subi	r30, 0xB9	; 185
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 4));
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 59       	subi	r30, 0x9D	; 157
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 71       	andi	r24, 0x10	; 16
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	95 95       	asr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	95 95       	asr	r25
    1a80:	87 95       	ror	r24
    1a82:	95 95       	asr	r25
    1a84:	87 95       	ror	r24
    1a86:	95 95       	asr	r25
    1a88:	87 95       	ror	r24
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	63 e0       	ldi	r22, 0x03	; 3
    1a90:	49 2f       	mov	r20, r25
    1a92:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 5));
    1a96:	fe 01       	movw	r30, r28
    1a98:	ed 59       	subi	r30, 0x9D	; 157
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	80 72       	andi	r24, 0x20	; 32
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	95 95       	asr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	95 95       	asr	r25
    1aac:	87 95       	ror	r24
    1aae:	95 95       	asr	r25
    1ab0:	87 95       	ror	r24
    1ab2:	95 95       	asr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	95 95       	asr	r25
    1ab8:	87 95       	ror	r24
    1aba:	98 2f       	mov	r25, r24
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	49 2f       	mov	r20, r25
    1ac2:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 6));
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ed 59       	subi	r30, 0x9D	; 157
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 74       	andi	r24, 0x40	; 64
    1ad4:	90 70       	andi	r25, 0x00	; 0
    1ad6:	08 2e       	mov	r0, r24
    1ad8:	89 2f       	mov	r24, r25
    1ada:	00 0c       	add	r0, r0
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	00 0c       	add	r0, r0
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	98 2f       	mov	r25, r24
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	65 e0       	ldi	r22, 0x05	; 5
    1aec:	49 2f       	mov	r20, r25
    1aee:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 7));
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 59       	subi	r30, 0x9D	; 157
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	98 2f       	mov	r25, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	99 27       	eor	r25, r25
    1b00:	99 1f       	adc	r25, r25
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	66 e0       	ldi	r22, 0x06	; 6
    1b06:	49 2f       	mov	r20, r25
    1b08:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 5b       	subi	r30, 0xBD	; 189
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a0 e8       	ldi	r26, 0x80	; 128
    1b18:	bf e3       	ldi	r27, 0x3F	; 63
    1b1a:	80 83       	st	Z, r24
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	a2 83       	std	Z+2, r26	; 0x02
    1b20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	8e 01       	movw	r16, r28
    1b24:	01 5c       	subi	r16, 0xC1	; 193
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	fe 01       	movw	r30, r28
    1b2a:	ed 5b       	subi	r30, 0xBD	; 189
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	55 e4       	ldi	r21, 0x45	; 69
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	80 83       	st	Z, r24
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	a2 83       	std	Z+2, r26	; 0x02
    1b4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b50:	fe 01       	movw	r30, r28
    1b52:	ff 96       	adiw	r30, 0x3f	; 63
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e af       	std	Y+62, r25	; 0x3e
    1b72:	8d af       	std	Y+61, r24	; 0x3d
    1b74:	46 c0       	rjmp	.+140    	; 0x1c02 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1b76:	fe 01       	movw	r30, r28
    1b78:	ff 96       	adiw	r30, 0x3f	; 63
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	64 f5       	brge	.+88     	; 0x1bea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	fe 01       	movw	r30, r28
    1b94:	ed 5b       	subi	r30, 0xBD	; 189
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e af       	std	Y+62, r25	; 0x3e
    1bbe:	8d af       	std	Y+61, r24	; 0x3d
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_sendCommand+0x478>
    1bc2:	80 e9       	ldi	r24, 0x90	; 144
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9c af       	std	Y+60, r25	; 0x3c
    1bc8:	8b af       	std	Y+59, r24	; 0x3b
    1bca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_sendCommand+0x466>
    1bd2:	9c af       	std	Y+60, r25	; 0x3c
    1bd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9e af       	std	Y+62, r25	; 0x3e
    1bde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <LCD_sendCommand+0x45a>
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	fe 01       	movw	r30, r28
    1bec:	ff 96       	adiw	r30, 0x3f	; 63
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e af       	std	Y+62, r25	; 0x3e
    1c00:	8d af       	std	Y+61, r24	; 0x3d
    1c02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c06:	9a af       	std	Y+58, r25	; 0x3a
    1c08:	89 af       	std	Y+57, r24	; 0x39
    1c0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_sendCommand+0x4a6>
    1c12:	9a af       	std	Y+58, r25	; 0x3a
    1c14:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e8       	ldi	r26, 0x80	; 128
    1c26:	bf e3       	ldi	r27, 0x3F	; 63
    1c28:	8d ab       	std	Y+53, r24	; 0x35
    1c2a:	9e ab       	std	Y+54, r25	; 0x36
    1c2c:	af ab       	std	Y+55, r26	; 0x37
    1c2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6d a9       	ldd	r22, Y+53	; 0x35
    1c32:	7e a9       	ldd	r23, Y+54	; 0x36
    1c34:	8f a9       	ldd	r24, Y+55	; 0x37
    1c36:	98 ad       	ldd	r25, Y+56	; 0x38
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a e7       	ldi	r20, 0x7A	; 122
    1c3e:	55 e4       	ldi	r21, 0x45	; 69
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	89 ab       	std	Y+49, r24	; 0x31
    1c4a:	9a ab       	std	Y+50, r25	; 0x32
    1c4c:	ab ab       	std	Y+51, r26	; 0x33
    1c4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c50:	69 a9       	ldd	r22, Y+49	; 0x31
    1c52:	7a a9       	ldd	r23, Y+50	; 0x32
    1c54:	8b a9       	ldd	r24, Y+51	; 0x33
    1c56:	9c a9       	ldd	r25, Y+52	; 0x34
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	98 ab       	std	Y+48, r25	; 0x30
    1c6e:	8f a7       	std	Y+47, r24	; 0x2f
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1c72:	69 a9       	ldd	r22, Y+49	; 0x31
    1c74:	7a a9       	ldd	r23, Y+50	; 0x32
    1c76:	8b a9       	ldd	r24, Y+51	; 0x33
    1c78:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c90:	98 ad       	ldd	r25, Y+56	; 0x38
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	98 ab       	std	Y+48, r25	; 0x30
    1cb0:	8f a7       	std	Y+47, r24	; 0x2f
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <LCD_sendCommand+0x56a>
    1cb4:	80 e9       	ldi	r24, 0x90	; 144
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	9e a7       	std	Y+46, r25	; 0x2e
    1cba:	8d a7       	std	Y+45, r24	; 0x2d
    1cbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_sendCommand+0x558>
    1cc4:	9e a7       	std	Y+46, r25	; 0x2e
    1cc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	98 ab       	std	Y+48, r25	; 0x30
    1cd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <LCD_sendCommand+0x54c>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cde:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	98 ab       	std	Y+48, r25	; 0x30
    1cee:	8f a7       	std	Y+47, r24	; 0x2f
    1cf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf4:	9c a7       	std	Y+44, r25	; 0x2c
    1cf6:	8b a7       	std	Y+43, r24	; 0x2b
    1cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_sendCommand+0x594>
    1d00:	9c a7       	std	Y+44, r25	; 0x2c
    1d02:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e8       	ldi	r26, 0x80	; 128
    1d14:	bf e3       	ldi	r27, 0x3F	; 63
    1d16:	8f a3       	std	Y+39, r24	; 0x27
    1d18:	98 a7       	std	Y+40, r25	; 0x28
    1d1a:	a9 a7       	std	Y+41, r26	; 0x29
    1d1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d20:	78 a5       	ldd	r23, Y+40	; 0x28
    1d22:	89 a5       	ldd	r24, Y+41	; 0x29
    1d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	55 e4       	ldi	r21, 0x45	; 69
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8b a3       	std	Y+35, r24	; 0x23
    1d38:	9c a3       	std	Y+36, r25	; 0x24
    1d3a:	ad a3       	std	Y+37, r26	; 0x25
    1d3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d40:	7c a1       	ldd	r23, Y+36	; 0x24
    1d42:	8d a1       	ldd	r24, Y+37	; 0x25
    1d44:	9e a1       	ldd	r25, Y+38	; 0x26
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d60:	6b a1       	ldd	r22, Y+35	; 0x23
    1d62:	7c a1       	ldd	r23, Y+36	; 0x24
    1d64:	8d a1       	ldd	r24, Y+37	; 0x25
    1d66:	9e a1       	ldd	r25, Y+38	; 0x26
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6f a1       	ldd	r22, Y+39	; 0x27
    1d7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9a a3       	std	Y+34, r25	; 0x22
    1d9e:	89 a3       	std	Y+33, r24	; 0x21
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_sendCommand+0x658>
    1da2:	80 e9       	ldi	r24, 0x90	; 144
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	98 a3       	std	Y+32, r25	; 0x20
    1da8:	8f 8f       	std	Y+31, r24	; 0x1f
    1daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dac:	98 a1       	ldd	r25, Y+32	; 0x20
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_sendCommand+0x646>
    1db2:	98 a3       	std	Y+32, r25	; 0x20
    1db4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	89 a1       	ldd	r24, Y+33	; 0x21
    1db8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_sendCommand+0x63a>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9a a3       	std	Y+34, r25	; 0x22
    1ddc:	89 a3       	std	Y+33, r24	; 0x21
    1dde:	89 a1       	ldd	r24, Y+33	; 0x21
    1de0:	9a a1       	ldd	r25, Y+34	; 0x22
    1de2:	9e 8f       	std	Y+30, r25	; 0x1e
    1de4:	8d 8f       	std	Y+29, r24	; 0x1d
    1de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_sendCommand+0x682>
    1dee:	9e 8f       	std	Y+30, r25	; 0x1e
    1df0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 0));
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 59       	subi	r30, 0x9D	; 157
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	91 70       	andi	r25, 0x01	; 1
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	49 2f       	mov	r20, r25
    1e04:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 1));
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ed 59       	subi	r30, 0x9D	; 157
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	82 70       	andi	r24, 0x02	; 2
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	95 95       	asr	r25
    1e1a:	87 95       	ror	r24
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	49 2f       	mov	r20, r25
    1e24:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 2));
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ed 59       	subi	r30, 0x9D	; 157
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	84 70       	andi	r24, 0x04	; 4
    1e36:	90 70       	andi	r25, 0x00	; 0
    1e38:	95 95       	asr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	95 95       	asr	r25
    1e3e:	87 95       	ror	r24
    1e40:	98 2f       	mov	r25, r24
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	65 e0       	ldi	r22, 0x05	; 5
    1e46:	49 2f       	mov	r20, r25
    1e48:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 3));
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 59       	subi	r30, 0x9D	; 157
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 70       	andi	r24, 0x08	; 8
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	95 95       	asr	r25
    1e66:	87 95       	ror	r24
    1e68:	98 2f       	mov	r25, r24
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	66 e0       	ldi	r22, 0x06	; 6
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	89 8f       	std	Y+25, r24	; 0x19
    1e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e80:	ab 8f       	std	Y+27, r26	; 0x1b
    1e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	55 e4       	ldi	r21, 0x45	; 69
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ea0:	af 8b       	std	Y+23, r26	; 0x17
    1ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_sendCommand+0x7be>
    1f08:	80 e9       	ldi	r24, 0x90	; 144
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_sendCommand+0x7ac>
    1f18:	9a 8b       	std	Y+18, r25	; 0x12
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_sendCommand+0x7a0>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	98 89       	ldd	r25, Y+16	; 0x10
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_sendCommand+0x7e8>
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e8       	ldi	r26, 0x80	; 128
    1f68:	bf e3       	ldi	r27, 0x3F	; 63
    1f6a:	8b 87       	std	Y+11, r24	; 0x0b
    1f6c:	9c 87       	std	Y+12, r25	; 0x0c
    1f6e:	ad 87       	std	Y+13, r26	; 0x0d
    1f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a e7       	ldi	r20, 0x7A	; 122
    1f80:	55 e4       	ldi	r21, 0x45	; 69
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	8f 83       	std	Y+7, r24	; 0x07
    1f8c:	98 87       	std	Y+8, r25	; 0x08
    1f8e:	a9 87       	std	Y+9, r26	; 0x09
    1f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f92:	6f 81       	ldd	r22, Y+7	; 0x07
    1f94:	78 85       	ldd	r23, Y+8	; 0x08
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	4c f5       	brge	.+82     	; 0x201e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e2       	ldi	r20, 0x20	; 32
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <LCD_sendCommand+0x8ac>
    1ff6:	80 e9       	ldi	r24, 0x90	; 144
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x89a>
    2006:	9c 83       	std	Y+4, r25	; 0x04
    2008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <LCD_sendCommand+0x88e>
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_sendCommand+0x8d6>
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2046:	cd 59       	subi	r28, 0x9D	; 157
    2048:	df 4f       	sbci	r29, 0xFF	; 255
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	08 95       	ret

0000205e <LCD_displayCharacter>:
/*
 * Description :
 * display a character on the LCD
 */
void LCD_displayCharacter(uint8 character)
{
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	c3 56       	subi	r28, 0x63	; 99
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	fe 01       	movw	r30, r28
    207a:	ed 59       	subi	r30, 0x9D	; 157
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 83       	st	Z, r24
	/* set RS to high to send a character */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    208a:	fe 01       	movw	r30, r28
    208c:	e1 5a       	subi	r30, 0xA1	; 161
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e8       	ldi	r26, 0x80	; 128
    2096:	bf e3       	ldi	r27, 0x3F	; 63
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	8e 01       	movw	r16, r28
    20a2:	05 5a       	subi	r16, 0xA5	; 165
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
    20a6:	fe 01       	movw	r30, r28
    20a8:	e1 5a       	subi	r30, 0xA1	; 161
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	f8 01       	movw	r30, r16
    20c6:	80 83       	st	Z, r24
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	a2 83       	std	Z+2, r26	; 0x02
    20cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 5a       	subi	r30, 0xA5	; 165
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	44 f4       	brge	.+16     	; 0x20fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 5a       	subi	r30, 0xA7	; 167
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
    20fa:	64 c0       	rjmp	.+200    	; 0x21c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    20fc:	fe 01       	movw	r30, r28
    20fe:	e5 5a       	subi	r30, 0xA5	; 165
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	0c f0       	brlt	.+2      	; 0x211c <LCD_displayCharacter+0xbe>
    211a:	43 c0       	rjmp	.+134    	; 0x21a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	fe 01       	movw	r30, r28
    211e:	e1 5a       	subi	r30, 0xA1	; 161
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8e 01       	movw	r16, r28
    213c:	07 5a       	subi	r16, 0xA7	; 167
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	1f c0       	rjmp	.+62     	; 0x2192 <LCD_displayCharacter+0x134>
    2154:	fe 01       	movw	r30, r28
    2156:	e9 5a       	subi	r30, 0xA9	; 169
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 e9       	ldi	r24, 0x90	; 144
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	fe 01       	movw	r30, r28
    2164:	e9 5a       	subi	r30, 0xA9	; 169
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_displayCharacter+0x10e>
    2170:	fe 01       	movw	r30, r28
    2172:	e9 5a       	subi	r30, 0xA9	; 169
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	de 01       	movw	r26, r28
    217c:	a7 5a       	subi	r26, 0xA7	; 167
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e7 5a       	subi	r30, 0xA7	; 167
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	11 96       	adiw	r26, 0x01	; 1
    218e:	9c 93       	st	X, r25
    2190:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	fe 01       	movw	r30, r28
    2194:	e7 5a       	subi	r30, 0xA7	; 167
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	d1 f6       	brne	.-76     	; 0x2154 <LCD_displayCharacter+0xf6>
    21a0:	27 c0       	rjmp	.+78     	; 0x21f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a2:	8e 01       	movw	r16, r28
    21a4:	07 5a       	subi	r16, 0xA7	; 167
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e5 5a       	subi	r30, 0xA5	; 165
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	de 01       	movw	r26, r28
    21c6:	ab 5a       	subi	r26, 0xAB	; 171
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 5a       	subi	r30, 0xA7	; 167
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	8d 93       	st	X+, r24
    21d6:	9c 93       	st	X, r25
    21d8:	fe 01       	movw	r30, r28
    21da:	eb 5a       	subi	r30, 0xAB	; 171
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_displayCharacter+0x184>
    21e6:	fe 01       	movw	r30, r28
    21e8:	eb 5a       	subi	r30, 0xAB	; 171
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    21fa:	fe 01       	movw	r30, r28
    21fc:	ef 5a       	subi	r30, 0xAF	; 175
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 e8       	ldi	r26, 0x80	; 128
    2206:	bf e3       	ldi	r27, 0x3F	; 63
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	8e 01       	movw	r16, r28
    2212:	03 5b       	subi	r16, 0xB3	; 179
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	ef 5a       	subi	r30, 0xAF	; 175
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a e7       	ldi	r20, 0x7A	; 122
    222a:	55 e4       	ldi	r21, 0x45	; 69
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223e:	fe 01       	movw	r30, r28
    2240:	e3 5b       	subi	r30, 0xB3	; 179
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	44 f4       	brge	.+16     	; 0x226c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    225c:	fe 01       	movw	r30, r28
    225e:	e5 5b       	subi	r30, 0xB5	; 181
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	64 c0       	rjmp	.+200    	; 0x2334 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    226c:	fe 01       	movw	r30, r28
    226e:	e3 5b       	subi	r30, 0xB3	; 179
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <LCD_displayCharacter+0x22e>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5a       	subi	r30, 0xAF	; 175
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8e 01       	movw	r16, r28
    22ac:	05 5b       	subi	r16, 0xB5	; 181
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <LCD_displayCharacter+0x2a4>
    22c4:	fe 01       	movw	r30, r28
    22c6:	e7 5b       	subi	r30, 0xB7	; 183
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 e9       	ldi	r24, 0x90	; 144
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5b       	subi	r30, 0xB7	; 183
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_displayCharacter+0x27e>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e7 5b       	subi	r30, 0xB7	; 183
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	de 01       	movw	r26, r28
    22ec:	a5 5b       	subi	r26, 0xB5	; 181
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e5 5b       	subi	r30, 0xB5	; 181
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	fe 01       	movw	r30, r28
    2304:	e5 5b       	subi	r30, 0xB5	; 181
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f6       	brne	.-76     	; 0x22c4 <LCD_displayCharacter+0x266>
    2310:	27 c0       	rjmp	.+78     	; 0x2360 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	05 5b       	subi	r16, 0xB5	; 181
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e3 5b       	subi	r30, 0xB3	; 179
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	de 01       	movw	r26, r28
    2336:	a9 5b       	subi	r26, 0xB9	; 185
    2338:	bf 4f       	sbci	r27, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e5 5b       	subi	r30, 0xB5	; 181
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8d 93       	st	X+, r24
    2346:	9c 93       	st	X, r25
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5b       	subi	r30, 0xB9	; 185
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x2f4>
    2356:	fe 01       	movw	r30, r28
    2358:	e9 5b       	subi	r30, 0xB9	; 185
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 4));
    2360:	fe 01       	movw	r30, r28
    2362:	ed 59       	subi	r30, 0x9D	; 157
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	80 71       	andi	r24, 0x10	; 16
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	95 95       	asr	r25
    2372:	87 95       	ror	r24
    2374:	95 95       	asr	r25
    2376:	87 95       	ror	r24
    2378:	95 95       	asr	r25
    237a:	87 95       	ror	r24
    237c:	95 95       	asr	r25
    237e:	87 95       	ror	r24
    2380:	98 2f       	mov	r25, r24
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	63 e0       	ldi	r22, 0x03	; 3
    2386:	49 2f       	mov	r20, r25
    2388:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 5));
    238c:	fe 01       	movw	r30, r28
    238e:	ed 59       	subi	r30, 0x9D	; 157
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	80 72       	andi	r24, 0x20	; 32
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	95 95       	asr	r25
    239e:	87 95       	ror	r24
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	95 95       	asr	r25
    23a6:	87 95       	ror	r24
    23a8:	95 95       	asr	r25
    23aa:	87 95       	ror	r24
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	98 2f       	mov	r25, r24
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	64 e0       	ldi	r22, 0x04	; 4
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 6));
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 59       	subi	r30, 0x9D	; 157
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	80 74       	andi	r24, 0x40	; 64
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	08 2e       	mov	r0, r24
    23ce:	89 2f       	mov	r24, r25
    23d0:	00 0c       	add	r0, r0
    23d2:	88 1f       	adc	r24, r24
    23d4:	99 0b       	sbc	r25, r25
    23d6:	00 0c       	add	r0, r0
    23d8:	88 1f       	adc	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	98 2f       	mov	r25, r24
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	65 e0       	ldi	r22, 0x05	; 5
    23e2:	49 2f       	mov	r20, r25
    23e4:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 7));
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	98 2f       	mov	r25, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	99 27       	eor	r25, r25
    23f6:	99 1f       	adc	r25, r25
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	66 e0       	ldi	r22, 0x06	; 6
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    2402:	fe 01       	movw	r30, r28
    2404:	ed 5b       	subi	r30, 0xBD	; 189
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	80 83       	st	Z, r24
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	a2 83       	std	Z+2, r26	; 0x02
    2416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	8e 01       	movw	r16, r28
    241a:	01 5c       	subi	r16, 0xC1	; 193
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	ed 5b       	subi	r30, 0xBD	; 189
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	55 e4       	ldi	r21, 0x45	; 69
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	f8 01       	movw	r30, r16
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2446:	fe 01       	movw	r30, r28
    2448:	ff 96       	adiw	r30, 0x3f	; 63
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9e af       	std	Y+62, r25	; 0x3e
    2468:	8d af       	std	Y+61, r24	; 0x3d
    246a:	46 c0       	rjmp	.+140    	; 0x24f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    246c:	fe 01       	movw	r30, r28
    246e:	ff 96       	adiw	r30, 0x3f	; 63
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	64 f5       	brge	.+88     	; 0x24e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ed 5b       	subi	r30, 0xBD	; 189
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e af       	std	Y+62, r25	; 0x3e
    24b4:	8d af       	std	Y+61, r24	; 0x3d
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <LCD_displayCharacter+0x478>
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	9c af       	std	Y+60, r25	; 0x3c
    24be:	8b af       	std	Y+59, r24	; 0x3b
    24c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    24c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_displayCharacter+0x466>
    24c8:	9c af       	std	Y+60, r25	; 0x3c
    24ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    24ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9e af       	std	Y+62, r25	; 0x3e
    24d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <LCD_displayCharacter+0x45a>
    24de:	16 c0       	rjmp	.+44     	; 0x250c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	fe 01       	movw	r30, r28
    24e2:	ff 96       	adiw	r30, 0x3f	; 63
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e af       	std	Y+62, r25	; 0x3e
    24f6:	8d af       	std	Y+61, r24	; 0x3d
    24f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    24fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    24fc:	9a af       	std	Y+58, r25	; 0x3a
    24fe:	89 af       	std	Y+57, r24	; 0x39
    2500:	89 ad       	ldd	r24, Y+57	; 0x39
    2502:	9a ad       	ldd	r25, Y+58	; 0x3a
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_displayCharacter+0x4a6>
    2508:	9a af       	std	Y+58, r25	; 0x3a
    250a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8d ab       	std	Y+53, r24	; 0x35
    2520:	9e ab       	std	Y+54, r25	; 0x36
    2522:	af ab       	std	Y+55, r26	; 0x37
    2524:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	55 e4       	ldi	r21, 0x45	; 69
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	89 ab       	std	Y+49, r24	; 0x31
    2540:	9a ab       	std	Y+50, r25	; 0x32
    2542:	ab ab       	std	Y+51, r26	; 0x33
    2544:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2546:	69 a9       	ldd	r22, Y+49	; 0x31
    2548:	7a a9       	ldd	r23, Y+50	; 0x32
    254a:	8b a9       	ldd	r24, Y+51	; 0x33
    254c:	9c a9       	ldd	r25, Y+52	; 0x34
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	98 ab       	std	Y+48, r25	; 0x30
    2564:	8f a7       	std	Y+47, r24	; 0x2f
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2568:	69 a9       	ldd	r22, Y+49	; 0x31
    256a:	7a a9       	ldd	r23, Y+50	; 0x32
    256c:	8b a9       	ldd	r24, Y+51	; 0x33
    256e:	9c a9       	ldd	r25, Y+52	; 0x34
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6d a9       	ldd	r22, Y+53	; 0x35
    2582:	7e a9       	ldd	r23, Y+54	; 0x36
    2584:	8f a9       	ldd	r24, Y+55	; 0x37
    2586:	98 ad       	ldd	r25, Y+56	; 0x38
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	98 ab       	std	Y+48, r25	; 0x30
    25a6:	8f a7       	std	Y+47, r24	; 0x2f
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_displayCharacter+0x56a>
    25aa:	80 e9       	ldi	r24, 0x90	; 144
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	9e a7       	std	Y+46, r25	; 0x2e
    25b0:	8d a7       	std	Y+45, r24	; 0x2d
    25b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    25b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_displayCharacter+0x558>
    25ba:	9e a7       	std	Y+46, r25	; 0x2e
    25bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c0:	98 a9       	ldd	r25, Y+48	; 0x30
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_displayCharacter+0x54c>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	69 a9       	ldd	r22, Y+49	; 0x31
    25d4:	7a a9       	ldd	r23, Y+50	; 0x32
    25d6:	8b a9       	ldd	r24, Y+51	; 0x33
    25d8:	9c a9       	ldd	r25, Y+52	; 0x34
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	98 ab       	std	Y+48, r25	; 0x30
    25e4:	8f a7       	std	Y+47, r24	; 0x2f
    25e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ea:	9c a7       	std	Y+44, r25	; 0x2c
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
    25ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_displayCharacter+0x594>
    25f6:	9c a7       	std	Y+44, r25	; 0x2c
    25f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8f a3       	std	Y+39, r24	; 0x27
    260e:	98 a7       	std	Y+40, r25	; 0x28
    2610:	a9 a7       	std	Y+41, r26	; 0x29
    2612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	55 e4       	ldi	r21, 0x45	; 69
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8b a3       	std	Y+35, r24	; 0x23
    262e:	9c a3       	std	Y+36, r25	; 0x24
    2630:	ad a3       	std	Y+37, r26	; 0x25
    2632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2634:	6b a1       	ldd	r22, Y+35	; 0x23
    2636:	7c a1       	ldd	r23, Y+36	; 0x24
    2638:	8d a1       	ldd	r24, Y+37	; 0x25
    263a:	9e a1       	ldd	r25, Y+38	; 0x26
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9a a3       	std	Y+34, r25	; 0x22
    2652:	89 a3       	std	Y+33, r24	; 0x21
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2656:	6b a1       	ldd	r22, Y+35	; 0x23
    2658:	7c a1       	ldd	r23, Y+36	; 0x24
    265a:	8d a1       	ldd	r24, Y+37	; 0x25
    265c:	9e a1       	ldd	r25, Y+38	; 0x26
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6f a1       	ldd	r22, Y+39	; 0x27
    2670:	78 a5       	ldd	r23, Y+40	; 0x28
    2672:	89 a5       	ldd	r24, Y+41	; 0x29
    2674:	9a a5       	ldd	r25, Y+42	; 0x2a
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9a a3       	std	Y+34, r25	; 0x22
    2694:	89 a3       	std	Y+33, r24	; 0x21
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_displayCharacter+0x658>
    2698:	80 e9       	ldi	r24, 0x90	; 144
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
    26a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a2:	98 a1       	ldd	r25, Y+32	; 0x20
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_displayCharacter+0x646>
    26a8:	98 a3       	std	Y+32, r25	; 0x20
    26aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	89 a1       	ldd	r24, Y+33	; 0x21
    26ae:	9a a1       	ldd	r25, Y+34	; 0x22
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9a a3       	std	Y+34, r25	; 0x22
    26b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	89 a1       	ldd	r24, Y+33	; 0x21
    26b8:	9a a1       	ldd	r25, Y+34	; 0x22
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_displayCharacter+0x63a>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9a a3       	std	Y+34, r25	; 0x22
    26d2:	89 a3       	std	Y+33, r24	; 0x21
    26d4:	89 a1       	ldd	r24, Y+33	; 0x21
    26d6:	9a a1       	ldd	r25, Y+34	; 0x22
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
    26dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_displayCharacter+0x682>
    26e4:	9e 8f       	std	Y+30, r25	; 0x1e
    26e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 0));
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 59       	subi	r30, 0x9D	; 157
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	98 2f       	mov	r25, r24
    26f2:	91 70       	andi	r25, 0x01	; 1
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	63 e0       	ldi	r22, 0x03	; 3
    26f8:	49 2f       	mov	r20, r25
    26fa:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 1));
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 59       	subi	r30, 0x9D	; 157
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	82 70       	andi	r24, 0x02	; 2
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	95 95       	asr	r25
    2710:	87 95       	ror	r24
    2712:	98 2f       	mov	r25, r24
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	64 e0       	ldi	r22, 0x04	; 4
    2718:	49 2f       	mov	r20, r25
    271a:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 2));
    271e:	fe 01       	movw	r30, r28
    2720:	ed 59       	subi	r30, 0x9D	; 157
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	84 70       	andi	r24, 0x04	; 4
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	95 95       	asr	r25
    2730:	87 95       	ror	r24
    2732:	95 95       	asr	r25
    2734:	87 95       	ror	r24
    2736:	98 2f       	mov	r25, r24
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	65 e0       	ldi	r22, 0x05	; 5
    273c:	49 2f       	mov	r20, r25
    273e:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 3));
    2742:	fe 01       	movw	r30, r28
    2744:	ed 59       	subi	r30, 0x9D	; 157
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	88 70       	andi	r24, 0x08	; 8
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	98 2f       	mov	r25, r24
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	66 e0       	ldi	r22, 0x06	; 6
    2764:	49 2f       	mov	r20, r25
    2766:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e8       	ldi	r26, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	89 8f       	std	Y+25, r24	; 0x19
    2774:	9a 8f       	std	Y+26, r25	; 0x1a
    2776:	ab 8f       	std	Y+27, r26	; 0x1b
    2778:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	55 e4       	ldi	r21, 0x45	; 69
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8d 8b       	std	Y+21, r24	; 0x15
    2794:	9e 8b       	std	Y+22, r25	; 0x16
    2796:	af 8b       	std	Y+23, r26	; 0x17
    2798:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	69 8d       	ldd	r22, Y+25	; 0x19
    27d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_displayCharacter+0x7be>
    27fe:	80 e9       	ldi	r24, 0x90	; 144
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	9a 8b       	std	Y+18, r25	; 0x12
    2804:	89 8b       	std	Y+17, r24	; 0x11
    2806:	89 89       	ldd	r24, Y+17	; 0x11
    2808:	9a 89       	ldd	r25, Y+18	; 0x12
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_displayCharacter+0x7ac>
    280e:	9a 8b       	std	Y+18, r25	; 0x12
    2810:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8b 89       	ldd	r24, Y+19	; 0x13
    2814:	9c 89       	ldd	r25, Y+20	; 0x14
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8b 89       	ldd	r24, Y+19	; 0x13
    281e:	9c 89       	ldd	r25, Y+20	; 0x14
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_displayCharacter+0x7a0>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6d 89       	ldd	r22, Y+21	; 0x15
    2828:	7e 89       	ldd	r23, Y+22	; 0x16
    282a:	8f 89       	ldd	r24, Y+23	; 0x17
    282c:	98 8d       	ldd	r25, Y+24	; 0x18
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	98 8b       	std	Y+16, r25	; 0x10
    2840:	8f 87       	std	Y+15, r24	; 0x0f
    2842:	8f 85       	ldd	r24, Y+15	; 0x0f
    2844:	98 89       	ldd	r25, Y+16	; 0x10
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x7e8>
    284a:	98 8b       	std	Y+16, r25	; 0x10
    284c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_displayCharacter+0x8ac>
    28ec:	80 e9       	ldi	r24, 0x90	; 144
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_displayCharacter+0x89a>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_displayCharacter+0x88e>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_displayCharacter+0x8d6>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    293c:	cd 59       	subi	r28, 0x9D	; 157
    293e:	df 4f       	sbci	r29, 0xFF	; 255
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	08 95       	ret

00002954 <LCD_displayString>:
/*
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const sint8* string)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <LCD_displayString+0x6>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	0a c0       	rjmp	.+20     	; 0x2978 <LCD_displayString+0x24>
	for(; *string!='\0'; string++)
	{
		LCD_displayCharacter(*string);
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	80 81       	ld	r24, Z
    296a:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const sint8* string)
{
	for(; *string!='\0'; string++)
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	9a 83       	std	Y+2, r25	; 0x02
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	e9 81       	ldd	r30, Y+1	; 0x01
    297a:	fa 81       	ldd	r31, Y+2	; 0x02
    297c:	80 81       	ld	r24, Z
    297e:	88 23       	and	r24, r24
    2980:	89 f7       	brne	.-30     	; 0x2964 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
	}
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_displayStringRowColumn>:
/*
 * Description :
 * display a string in a specific location
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column,const sint8* string)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	00 d0       	rcall	.+0      	; 0x2992 <LCD_displayStringRowColumn+0x6>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <LCD_displayStringRowColumn+0x8>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	6a 83       	std	Y+2, r22	; 0x02
    299c:	5c 83       	std	Y+4, r21	; 0x04
    299e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column);
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	6a 81       	ldd	r22, Y+2	; 0x02
    29a4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_moveCursor>
	LCD_displayString(string);
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <LCD_integerToString>:
/*
 * Description :
 * convert integers to characters then display it
 */
void LCD_integerToString(int num)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	62 97       	sbiw	r28, 0x12	; 18
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	9a 8b       	std	Y+18, r25	; 0x12
    29d4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(num, buff, 10);
    29d6:	89 89       	ldd	r24, Y+17	; 0x11
    29d8:	9a 89       	ldd	r25, Y+18	; 0x12
    29da:	9e 01       	movw	r18, r28
    29dc:	2f 5f       	subi	r18, 0xFF	; 255
    29de:	3f 4f       	sbci	r19, 0xFF	; 255
    29e0:	b9 01       	movw	r22, r18
    29e2:	4a e0       	ldi	r20, 0x0A	; 10
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <itoa>
	LCD_displayString((const uint8*)buff);
    29ea:	ce 01       	movw	r24, r28
    29ec:	01 96       	adiw	r24, 0x01	; 1
    29ee:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
}
    29f2:	62 96       	adiw	r28, 0x12	; 18
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <LCD_clearScreen>:
/*
 * Description :
 * clear the screen of the LCD
 */
void LCD_clearScreen(void)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <LCD_moveCursor>:
/*
 * Description :
 * move the LCD cursor to the desired location
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <LCD_moveCursor+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <LCD_moveCursor+0x8>
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	3c 83       	std	Y+4, r19	; 0x04
    2a30:	2b 83       	std	Y+3, r18	; 0x03
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	91 05       	cpc	r25, r1
    2a3a:	d1 f0       	breq	.+52     	; 0x2a70 <LCD_moveCursor+0x58>
    2a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <LCD_moveCursor+0x38>
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	61 f0       	breq	.+24     	; 0x2a66 <LCD_moveCursor+0x4e>
    2a4e:	21 c0       	rjmp	.+66     	; 0x2a92 <LCD_moveCursor+0x7a>
    2a50:	2b 81       	ldd	r18, Y+3	; 0x03
    2a52:	3c 81       	ldd	r19, Y+4	; 0x04
    2a54:	23 30       	cpi	r18, 0x03	; 3
    2a56:	31 05       	cpc	r19, r1
    2a58:	89 f0       	breq	.+34     	; 0x2a7c <LCD_moveCursor+0x64>
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	84 30       	cpi	r24, 0x04	; 4
    2a60:	91 05       	cpc	r25, r1
    2a62:	91 f0       	breq	.+36     	; 0x2a88 <LCD_moveCursor+0x70>
    2a64:	16 c0       	rjmp	.+44     	; 0x2a92 <LCD_moveCursor+0x7a>
	{
	case 0:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | column);
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	80 68       	ori	r24, 0x80	; 128
    2a6a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
    2a6e:	11 c0       	rjmp	.+34     	; 0x2a92 <LCD_moveCursor+0x7a>
		break;
	case 1:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x40));
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	80 5c       	subi	r24, 0xC0	; 192
    2a74:	80 68       	ori	r24, 0x80	; 128
    2a76:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
    2a7a:	0b c0       	rjmp	.+22     	; 0x2a92 <LCD_moveCursor+0x7a>
		break;
	case 3:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x10));
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	80 5f       	subi	r24, 0xF0	; 240
    2a80:	80 68       	ori	r24, 0x80	; 128
    2a82:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
    2a86:	05 c0       	rjmp	.+10     	; 0x2a92 <LCD_moveCursor+0x7a>
		break;
	case 4:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x50));
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	80 5b       	subi	r24, 0xB0	; 176
    2a8c:	80 68       	ori	r24, 0x80	; 128
    2a8e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_sendCommand>
		break;
	}
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LM35_getTemperature+0x6>
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2aac:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2aae:	1a 82       	std	Y+2, r1	; 0x02
    2ab0:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2ab2:	87 e0       	ldi	r24, 0x07	; 7
    2ab4:	0e 94 34 07 	call	0xe68	; 0xe68 <ADC_readChannel>
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REFERENCE_VOLTAGE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac0:	cc 01       	movw	r24, r24
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	26 e9       	ldi	r18, 0x96	; 150
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__mulsi3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	2a e0       	ldi	r18, 0x0A	; 10
    2aec:	37 ed       	ldi	r19, 0xD7	; 215
    2aee:	43 e2       	ldi	r20, 0x23	; 35
    2af0:	50 e4       	ldi	r21, 0x40	; 64
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 ed       	ldi	r19, 0xD0	; 208
    2b02:	4f eb       	ldi	r20, 0xBF	; 191
    2b04:	54 e4       	ldi	r21, 0x44	; 68
    2b06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <main>:

/* variable to set time */
uint16 g_time=30;

int main()
{
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	ce 57       	subi	r28, 0x7E	; 126
    2b38:	d0 40       	sbci	r29, 0x00	; 0
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
	/* variable to control mode */
	uint8 mode = AUTOMATIC;
    2b44:	fe 01       	movw	r30, r28
    2b46:	ec 58       	subi	r30, 0x8C	; 140
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	80 83       	st	Z, r24
	/* variable to control fan speed */
	uint8 speed = 0;
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ed 58       	subi	r30, 0x8D	; 141
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	10 82       	st	Z, r1
	/* variable to indicate whether timer1 is working or not */
	uint8 timerOn=FALSE;
    2b56:	fe 01       	movw	r30, r28
    2b58:	ee 58       	subi	r30, 0x8E	; 142
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	10 82       	st	Z, r1
	/* variable to configure ADC */
	ADC_ConfigType ADC_config;
	/* variable to configure Timer1 */
	Timer1_ConfigType Timer1_config;
	/* ADC configuration */
	ADC_config.prescaler=F_CPU_8;
    2b5e:	fe 01       	movw	r30, r28
    2b60:	eb 58       	subi	r30, 0x8B	; 139
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	81 83       	std	Z+1, r24	; 0x01
	ADC_config.ref_volt=INTERNAL;
    2b68:	fe 01       	movw	r30, r28
    2b6a:	eb 58       	subi	r30, 0x8B	; 139
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	80 83       	st	Z, r24
	/* initialize ADC */
	ADC_init(&ADC_config);
    2b72:	ce 01       	movw	r24, r28
    2b74:	8b 58       	subi	r24, 0x8B	; 139
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	/* Timer1 configuration */
	Timer1_config.initial_value=0;
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e9 58       	subi	r30, 0x89	; 137
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	11 82       	std	Z+1, r1	; 0x01
    2b84:	10 82       	st	Z, r1
	Timer1_config.compare_value=15635;
    2b86:	fe 01       	movw	r30, r28
    2b88:	e9 58       	subi	r30, 0x89	; 137
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	83 e1       	ldi	r24, 0x13	; 19
    2b8e:	9d e3       	ldi	r25, 0x3D	; 61
    2b90:	93 83       	std	Z+3, r25	; 0x03
    2b92:	82 83       	std	Z+2, r24	; 0x02
	Timer1_config.prescaler=CLK_1024;
    2b94:	fe 01       	movw	r30, r28
    2b96:	e9 58       	subi	r30, 0x89	; 137
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	85 e0       	ldi	r24, 0x05	; 5
    2b9c:	84 83       	std	Z+4, r24	; 0x04
	Timer1_config.mode=COMPARE;
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e9 58       	subi	r30, 0x89	; 137
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	85 83       	std	Z+5, r24	; 0x05
	/* call back function for Timer1 interrupts */
	Timer1_setCallBack(timerTick);
    2ba8:	8d ee       	ldi	r24, 0xED	; 237
    2baa:	9b e1       	ldi	r25, 0x1B	; 27
    2bac:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <Timer1_setCallBack>
	/* initialize motor pins */
	DcMotor_init();
    2bb0:	0e 94 64 07 	call	0xec8	; 0xec8 <DcMotor_init>
	/* initialize LCD */
	LCD_init();
    2bb4:	0e 94 02 0b 	call	0x1604	; 0x1604 <LCD_init>
	LCD_displayString("A / ");
    2bb8:	80 e6       	ldi	r24, 0x60	; 96
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
	//LCD_displayStringRowColumn(1, 3, "Temp =    C");
	/* set buttons pins input */
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    2bc0:	83 e0       	ldi	r24, 0x03	; 3
    2bc2:	62 e0       	ldi	r22, 0x02	; 2
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    2bca:	83 e0       	ldi	r24, 0x03	; 3
    2bcc:	63 e0       	ldi	r22, 0x03	; 3
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_INPUT);
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	64 e0       	ldi	r22, 0x04	; 4
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_INPUT);
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	65 e0       	ldi	r22, 0x05	; 5
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	/* set PIR pin input */
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_INPUT);
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	67 e0       	ldi	r22, 0x07	; 7
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	/* global interrupt enable */
	SREG|=(1<<7);
    2bfc:	af e5       	ldi	r26, 0x5F	; 95
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	ef e5       	ldi	r30, 0x5F	; 95
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	8c 93       	st	X, r24
	for(;;)
	{
		/* Turn the lamp on if there is motion */
		if(GPIO_readPin(PORTD_ID, PIN7_ID) == LOGIC_HIGH)
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	67 e0       	ldi	r22, 0x07	; 7
    2c0e:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	31 f4       	brne	.+12     	; 0x2c22 <main+0xf8>
		{
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
    2c20:	05 c0       	rjmp	.+10     	; 0x2c2c <main+0x102>
		}
		else
		{
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 af 08 	call	0x115e	; 0x115e <GPIO_writePin>
		}
		/* when D2 button pressed toggle mode */
		if(GPIO_readPin(PORTD_ID, PIN2_ID) == LOGIC_LOW)
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	62 e0       	ldi	r22, 0x02	; 2
    2c30:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    2c34:	88 23       	and	r24, r24
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <main+0x110>
    2c38:	8a c1       	rjmp	.+788    	; 0x2f4e <main+0x424>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	e3 59       	subi	r30, 0x93	; 147
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 ef       	ldi	r26, 0xF0	; 240
    2c46:	b1 e4       	ldi	r27, 0x41	; 65
    2c48:	80 83       	st	Z, r24
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	a2 83       	std	Z+2, r26	; 0x02
    2c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	8e 01       	movw	r16, r28
    2c52:	07 59       	subi	r16, 0x97	; 151
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	e3 59       	subi	r30, 0x93	; 147
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a e7       	ldi	r20, 0x7A	; 122
    2c6a:	55 e4       	ldi	r21, 0x45	; 69
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e7 59       	subi	r30, 0x97	; 151
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	44 f4       	brge	.+16     	; 0x2cac <main+0x182>
		__ticks = 1;
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e9 59       	subi	r30, 0x99	; 153
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
    2caa:	64 c0       	rjmp	.+200    	; 0x2d74 <main+0x24a>
	else if (__tmp > 65535)
    2cac:	fe 01       	movw	r30, r28
    2cae:	e7 59       	subi	r30, 0x97	; 151
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	0c f0       	brlt	.+2      	; 0x2ccc <main+0x1a2>
    2cca:	43 c0       	rjmp	.+134    	; 0x2d52 <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e3 59       	subi	r30, 0x93	; 147
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e2       	ldi	r20, 0x20	; 32
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8e 01       	movw	r16, r28
    2cec:	09 59       	subi	r16, 0x99	; 153
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	1f c0       	rjmp	.+62     	; 0x2d42 <main+0x218>
    2d04:	fe 01       	movw	r30, r28
    2d06:	eb 59       	subi	r30, 0x9B	; 155
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 e9       	ldi	r24, 0x90	; 144
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
    2d12:	fe 01       	movw	r30, r28
    2d14:	eb 59       	subi	r30, 0x9B	; 155
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <main+0x1f2>
    2d20:	fe 01       	movw	r30, r28
    2d22:	eb 59       	subi	r30, 0x9B	; 155
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	de 01       	movw	r26, r28
    2d2c:	a9 59       	subi	r26, 0x99	; 153
    2d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	e9 59       	subi	r30, 0x99	; 153
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	11 96       	adiw	r26, 0x01	; 1
    2d3e:	9c 93       	st	X, r25
    2d40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d42:	fe 01       	movw	r30, r28
    2d44:	e9 59       	subi	r30, 0x99	; 153
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	d1 f6       	brne	.-76     	; 0x2d04 <main+0x1da>
    2d50:	27 c0       	rjmp	.+78     	; 0x2da0 <main+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	8e 01       	movw	r16, r28
    2d54:	09 59       	subi	r16, 0x99	; 153
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e7 59       	subi	r30, 0x97	; 151
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	f8 01       	movw	r30, r16
    2d70:	91 83       	std	Z+1, r25	; 0x01
    2d72:	80 83       	st	Z, r24
    2d74:	de 01       	movw	r26, r28
    2d76:	ad 59       	subi	r26, 0x9D	; 157
    2d78:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e9 59       	subi	r30, 0x99	; 153
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	8d 93       	st	X+, r24
    2d86:	9c 93       	st	X, r25
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ed 59       	subi	r30, 0x9D	; 157
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <main+0x268>
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 59       	subi	r30, 0x9D	; 157
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
		{
			_delay_ms(30);
			if(GPIO_readPin(PORTD_ID, PIN2_ID) == LOGIC_LOW)
    2da0:	83 e0       	ldi	r24, 0x03	; 3
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    2da8:	88 23       	and	r24, r24
    2daa:	f1 f4       	brne	.+60     	; 0x2de8 <main+0x2be>
			{
				if(mode == AUTOMATIC)
    2dac:	fe 01       	movw	r30, r28
    2dae:	ec 58       	subi	r30, 0x8C	; 140
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	81 30       	cpi	r24, 0x01	; 1
    2db6:	61 f4       	brne	.+24     	; 0x2dd0 <main+0x2a6>
				{
					mode = MANUAL;
    2db8:	fe 01       	movw	r30, r28
    2dba:	ec 58       	subi	r30, 0x8C	; 140
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	10 82       	st	Z, r1
					LCD_displayStringRowColumn(0,0,"M / ");
    2dc0:	25 e6       	ldi	r18, 0x65	; 101
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	a9 01       	movw	r20, r18
    2dca:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
    2dce:	0c c0       	rjmp	.+24     	; 0x2de8 <main+0x2be>
				}
				else
				{
					mode = AUTOMATIC;
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ec 58       	subi	r30, 0x8C	; 140
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	80 83       	st	Z, r24
					LCD_displayStringRowColumn(0,0,"A / ");
    2dda:	20 e6       	ldi	r18, 0x60	; 96
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	a9 01       	movw	r20, r18
    2de4:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
    2de8:	fe 01       	movw	r30, r28
    2dea:	e1 5a       	subi	r30, 0xA1	; 161
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e2       	ldi	r26, 0x20	; 32
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	80 83       	st	Z, r24
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	a2 83       	std	Z+2, r26	; 0x02
    2dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	8e 01       	movw	r16, r28
    2e00:	05 5a       	subi	r16, 0xA5	; 165
    2e02:	1f 4f       	sbci	r17, 0xFF	; 255
    2e04:	fe 01       	movw	r30, r28
    2e06:	e1 5a       	subi	r30, 0xA1	; 161
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4a e7       	ldi	r20, 0x7A	; 122
    2e18:	55 e4       	ldi	r21, 0x45	; 69
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	f8 01       	movw	r30, r16
    2e24:	80 83       	st	Z, r24
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	a2 83       	std	Z+2, r26	; 0x02
    2e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e5 5a       	subi	r30, 0xA5	; 165
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	44 f4       	brge	.+16     	; 0x2e5a <main+0x330>
		__ticks = 1;
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e7 5a       	subi	r30, 0xA7	; 167
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
    2e58:	64 c0       	rjmp	.+200    	; 0x2f22 <main+0x3f8>
	else if (__tmp > 65535)
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e5 5a       	subi	r30, 0xA5	; 165
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	0c f0       	brlt	.+2      	; 0x2e7a <main+0x350>
    2e78:	43 c0       	rjmp	.+134    	; 0x2f00 <main+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e1 5a       	subi	r30, 0xA1	; 161
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	60 81       	ld	r22, Z
    2e82:	71 81       	ldd	r23, Z+1	; 0x01
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e2       	ldi	r20, 0x20	; 32
    2e8e:	51 e4       	ldi	r21, 0x41	; 65
    2e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	8e 01       	movw	r16, r28
    2e9a:	07 5a       	subi	r16, 0xA7	; 167
    2e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	f8 01       	movw	r30, r16
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
    2eb0:	1f c0       	rjmp	.+62     	; 0x2ef0 <main+0x3c6>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	e9 5a       	subi	r30, 0xA9	; 169
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 e9       	ldi	r24, 0x90	; 144
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	80 83       	st	Z, r24
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e9 5a       	subi	r30, 0xA9	; 169
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <main+0x3a0>
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e9 5a       	subi	r30, 0xA9	; 169
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed8:	de 01       	movw	r26, r28
    2eda:	a7 5a       	subi	r26, 0xA7	; 167
    2edc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e7 5a       	subi	r30, 0xA7	; 167
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	11 96       	adiw	r26, 0x01	; 1
    2eec:	9c 93       	st	X, r25
    2eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e7 5a       	subi	r30, 0xA7	; 167
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	d1 f6       	brne	.-76     	; 0x2eb2 <main+0x388>
    2efe:	27 c0       	rjmp	.+78     	; 0x2f4e <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	8e 01       	movw	r16, r28
    2f02:	07 5a       	subi	r16, 0xA7	; 167
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	e5 5a       	subi	r30, 0xA5	; 165
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	de 01       	movw	r26, r28
    2f24:	ab 5a       	subi	r26, 0xAB	; 171
    2f26:	bf 4f       	sbci	r27, 0xFF	; 255
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e7 5a       	subi	r30, 0xA7	; 167
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	8d 93       	st	X+, r24
    2f34:	9c 93       	st	X, r25
    2f36:	fe 01       	movw	r30, r28
    2f38:	eb 5a       	subi	r30, 0xAB	; 171
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 81       	ld	r24, Z
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <main+0x416>
    2f44:	fe 01       	movw	r30, r28
    2f46:	eb 5a       	subi	r30, 0xAB	; 171
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	91 83       	std	Z+1, r25	; 0x01
    2f4c:	80 83       	st	Z, r24
			}
			_delay_ms(10);
		}

		/* when D3 button pressed and the mode is manual increase speed  */
		if(GPIO_readPin(PORTD_ID, PIN3_ID) == LOGIC_LOW && mode == MANUAL)
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	63 e0       	ldi	r22, 0x03	; 3
    2f52:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    2f56:	88 23       	and	r24, r24
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <main+0x432>
    2f5a:	5e c1       	rjmp	.+700    	; 0x3218 <main+0x6ee>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ec 58       	subi	r30, 0x8C	; 140
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 81       	ld	r24, Z
    2f64:	88 23       	and	r24, r24
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <main+0x440>
    2f68:	57 c1       	rjmp	.+686    	; 0x3218 <main+0x6ee>
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ef 5a       	subi	r30, 0xAF	; 175
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 ef       	ldi	r26, 0xF0	; 240
    2f76:	b1 e4       	ldi	r27, 0x41	; 65
    2f78:	80 83       	st	Z, r24
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	a2 83       	std	Z+2, r26	; 0x02
    2f7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f80:	8e 01       	movw	r16, r28
    2f82:	03 5b       	subi	r16, 0xB3	; 179
    2f84:	1f 4f       	sbci	r17, 0xFF	; 255
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 5a       	subi	r30, 0xAF	; 175
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	4a e7       	ldi	r20, 0x7A	; 122
    2f9a:	55 e4       	ldi	r21, 0x45	; 69
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	80 83       	st	Z, r24
    2fa8:	91 83       	std	Z+1, r25	; 0x01
    2faa:	a2 83       	std	Z+2, r26	; 0x02
    2fac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e3 5b       	subi	r30, 0xB3	; 179
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e8       	ldi	r20, 0x80	; 128
    2fc2:	5f e3       	ldi	r21, 0x3F	; 63
    2fc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc8:	88 23       	and	r24, r24
    2fca:	44 f4       	brge	.+16     	; 0x2fdc <main+0x4b2>
		__ticks = 1;
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e5 5b       	subi	r30, 0xB5	; 181
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	80 83       	st	Z, r24
    2fda:	64 c0       	rjmp	.+200    	; 0x30a4 <main+0x57a>
	else if (__tmp > 65535)
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e3 5b       	subi	r30, 0xB3	; 179
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	60 81       	ld	r22, Z
    2fe4:	71 81       	ldd	r23, Z+1	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	3f ef       	ldi	r19, 0xFF	; 255
    2fee:	4f e7       	ldi	r20, 0x7F	; 127
    2ff0:	57 e4       	ldi	r21, 0x47	; 71
    2ff2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff6:	18 16       	cp	r1, r24
    2ff8:	0c f0       	brlt	.+2      	; 0x2ffc <main+0x4d2>
    2ffa:	43 c0       	rjmp	.+134    	; 0x3082 <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ef 5a       	subi	r30, 0xAF	; 175
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	8e 01       	movw	r16, r28
    301c:	05 5b       	subi	r16, 0xB5	; 181
    301e:	1f 4f       	sbci	r17, 0xFF	; 255
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	f8 01       	movw	r30, r16
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	1f c0       	rjmp	.+62     	; 0x3072 <main+0x548>
    3034:	fe 01       	movw	r30, r28
    3036:	e7 5b       	subi	r30, 0xB7	; 183
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 e9       	ldi	r24, 0x90	; 144
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	80 83       	st	Z, r24
    3042:	fe 01       	movw	r30, r28
    3044:	e7 5b       	subi	r30, 0xB7	; 183
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 81       	ld	r24, Z
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <main+0x522>
    3050:	fe 01       	movw	r30, r28
    3052:	e7 5b       	subi	r30, 0xB7	; 183
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305a:	de 01       	movw	r26, r28
    305c:	a5 5b       	subi	r26, 0xB5	; 181
    305e:	bf 4f       	sbci	r27, 0xFF	; 255
    3060:	fe 01       	movw	r30, r28
    3062:	e5 5b       	subi	r30, 0xB5	; 181
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	9c 93       	st	X, r25
    3070:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	fe 01       	movw	r30, r28
    3074:	e5 5b       	subi	r30, 0xB5	; 181
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	d1 f6       	brne	.-76     	; 0x3034 <main+0x50a>
    3080:	27 c0       	rjmp	.+78     	; 0x30d0 <main+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	8e 01       	movw	r16, r28
    3084:	05 5b       	subi	r16, 0xB5	; 181
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	fe 01       	movw	r30, r28
    308a:	e3 5b       	subi	r30, 0xB3	; 179
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	60 81       	ld	r22, Z
    3090:	71 81       	ldd	r23, Z+1	; 0x01
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	f8 01       	movw	r30, r16
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	de 01       	movw	r26, r28
    30a6:	a9 5b       	subi	r26, 0xB9	; 185
    30a8:	bf 4f       	sbci	r27, 0xFF	; 255
    30aa:	fe 01       	movw	r30, r28
    30ac:	e5 5b       	subi	r30, 0xB5	; 181
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	8d 93       	st	X+, r24
    30b6:	9c 93       	st	X, r25
    30b8:	fe 01       	movw	r30, r28
    30ba:	e9 5b       	subi	r30, 0xB9	; 185
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <main+0x598>
    30c6:	fe 01       	movw	r30, r28
    30c8:	e9 5b       	subi	r30, 0xB9	; 185
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
		{
			_delay_ms(30);
			if(GPIO_readPin(PORTD_ID, PIN3_ID) == LOGIC_LOW && mode == MANUAL)
    30d0:	83 e0       	ldi	r24, 0x03	; 3
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    30d8:	88 23       	and	r24, r24
    30da:	c9 f4       	brne	.+50     	; 0x310e <main+0x5e4>
    30dc:	fe 01       	movw	r30, r28
    30de:	ec 58       	subi	r30, 0x8C	; 140
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	88 23       	and	r24, r24
    30e6:	99 f4       	brne	.+38     	; 0x310e <main+0x5e4>
			{
				speed++;
    30e8:	de 01       	movw	r26, r28
    30ea:	ad 58       	subi	r26, 0x8D	; 141
    30ec:	bf 4f       	sbci	r27, 0xFF	; 255
    30ee:	fe 01       	movw	r30, r28
    30f0:	ed 58       	subi	r30, 0x8D	; 141
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	8c 93       	st	X, r24
				/* max speed is 4 and start from 0 when exceeding 4 */
				if(speed == 5)
    30fa:	fe 01       	movw	r30, r28
    30fc:	ed 58       	subi	r30, 0x8D	; 141
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	85 30       	cpi	r24, 0x05	; 5
    3104:	21 f4       	brne	.+8      	; 0x310e <main+0x5e4>
				{
					speed=0;
    3106:	fe 01       	movw	r30, r28
    3108:	ed 58       	subi	r30, 0x8D	; 141
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	10 82       	st	Z, r1
    310e:	fe 01       	movw	r30, r28
    3110:	ed 5b       	subi	r30, 0xBD	; 189
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	a0 e2       	ldi	r26, 0x20	; 32
    311a:	b1 e4       	ldi	r27, 0x41	; 65
    311c:	80 83       	st	Z, r24
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	a2 83       	std	Z+2, r26	; 0x02
    3122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3124:	8e 01       	movw	r16, r28
    3126:	01 5c       	subi	r16, 0xC1	; 193
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	fe 01       	movw	r30, r28
    312c:	ed 5b       	subi	r30, 0xBD	; 189
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4a e7       	ldi	r20, 0x7A	; 122
    313e:	55 e4       	ldi	r21, 0x45	; 69
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	f8 01       	movw	r30, r16
    314a:	80 83       	st	Z, r24
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	a2 83       	std	Z+2, r26	; 0x02
    3150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3152:	fe 01       	movw	r30, r28
    3154:	ff 96       	adiw	r30, 0x3f	; 63
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	2c f4       	brge	.+10     	; 0x3178 <main+0x64e>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9e af       	std	Y+62, r25	; 0x3e
    3174:	8d af       	std	Y+61, r24	; 0x3d
    3176:	46 c0       	rjmp	.+140    	; 0x3204 <main+0x6da>
	else if (__tmp > 65535)
    3178:	fe 01       	movw	r30, r28
    317a:	ff 96       	adiw	r30, 0x3f	; 63
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	3f ef       	ldi	r19, 0xFF	; 255
    3188:	4f e7       	ldi	r20, 0x7F	; 127
    318a:	57 e4       	ldi	r21, 0x47	; 71
    318c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3190:	18 16       	cp	r1, r24
    3192:	64 f5       	brge	.+88     	; 0x31ec <main+0x6c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3194:	fe 01       	movw	r30, r28
    3196:	ed 5b       	subi	r30, 0xBD	; 189
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	51 e4       	ldi	r21, 0x41	; 65
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9e af       	std	Y+62, r25	; 0x3e
    31c0:	8d af       	std	Y+61, r24	; 0x3d
    31c2:	0f c0       	rjmp	.+30     	; 0x31e2 <main+0x6b8>
    31c4:	80 e9       	ldi	r24, 0x90	; 144
    31c6:	91 e0       	ldi	r25, 0x01	; 1
    31c8:	9c af       	std	Y+60, r25	; 0x3c
    31ca:	8b af       	std	Y+59, r24	; 0x3b
    31cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    31ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <main+0x6a6>
    31d4:	9c af       	std	Y+60, r25	; 0x3c
    31d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31da:	9e ad       	ldd	r25, Y+62	; 0x3e
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	9e af       	std	Y+62, r25	; 0x3e
    31e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	69 f7       	brne	.-38     	; 0x31c4 <main+0x69a>
    31ea:	16 c0       	rjmp	.+44     	; 0x3218 <main+0x6ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ec:	fe 01       	movw	r30, r28
    31ee:	ff 96       	adiw	r30, 0x3f	; 63
    31f0:	60 81       	ld	r22, Z
    31f2:	71 81       	ldd	r23, Z+1	; 0x01
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	93 81       	ldd	r25, Z+3	; 0x03
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9e af       	std	Y+62, r25	; 0x3e
    3202:	8d af       	std	Y+61, r24	; 0x3d
    3204:	8d ad       	ldd	r24, Y+61	; 0x3d
    3206:	9e ad       	ldd	r25, Y+62	; 0x3e
    3208:	9a af       	std	Y+58, r25	; 0x3a
    320a:	89 af       	std	Y+57, r24	; 0x39
    320c:	89 ad       	ldd	r24, Y+57	; 0x39
    320e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3210:	01 97       	sbiw	r24, 0x01	; 1
    3212:	f1 f7       	brne	.-4      	; 0x3210 <main+0x6e6>
    3214:	9a af       	std	Y+58, r25	; 0x3a
    3216:	89 af       	std	Y+57, r24	; 0x39
			}
			_delay_ms(10);
		}

		/* when D4 button pressed toggle Timer1 */
		if(GPIO_readPin(PORTD_ID, PIN4_ID) == LOGIC_LOW)
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	64 e0       	ldi	r22, 0x04	; 4
    321c:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    3220:	88 23       	and	r24, r24
    3222:	09 f0       	breq	.+2      	; 0x3226 <main+0x6fc>
    3224:	21 c1       	rjmp	.+578    	; 0x3468 <main+0x93e>
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a0 ef       	ldi	r26, 0xF0	; 240
    322c:	b1 e4       	ldi	r27, 0x41	; 65
    322e:	8d ab       	std	Y+53, r24	; 0x35
    3230:	9e ab       	std	Y+54, r25	; 0x36
    3232:	af ab       	std	Y+55, r26	; 0x37
    3234:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3236:	6d a9       	ldd	r22, Y+53	; 0x35
    3238:	7e a9       	ldd	r23, Y+54	; 0x36
    323a:	8f a9       	ldd	r24, Y+55	; 0x37
    323c:	98 ad       	ldd	r25, Y+56	; 0x38
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	4a e7       	ldi	r20, 0x7A	; 122
    3244:	55 e4       	ldi	r21, 0x45	; 69
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	89 ab       	std	Y+49, r24	; 0x31
    3250:	9a ab       	std	Y+50, r25	; 0x32
    3252:	ab ab       	std	Y+51, r26	; 0x33
    3254:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3256:	69 a9       	ldd	r22, Y+49	; 0x31
    3258:	7a a9       	ldd	r23, Y+50	; 0x32
    325a:	8b a9       	ldd	r24, Y+51	; 0x33
    325c:	9c a9       	ldd	r25, Y+52	; 0x34
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	5f e3       	ldi	r21, 0x3F	; 63
    3266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326a:	88 23       	and	r24, r24
    326c:	2c f4       	brge	.+10     	; 0x3278 <main+0x74e>
		__ticks = 1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	98 ab       	std	Y+48, r25	; 0x30
    3274:	8f a7       	std	Y+47, r24	; 0x2f
    3276:	3f c0       	rjmp	.+126    	; 0x32f6 <main+0x7cc>
	else if (__tmp > 65535)
    3278:	69 a9       	ldd	r22, Y+49	; 0x31
    327a:	7a a9       	ldd	r23, Y+50	; 0x32
    327c:	8b a9       	ldd	r24, Y+51	; 0x33
    327e:	9c a9       	ldd	r25, Y+52	; 0x34
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	3f ef       	ldi	r19, 0xFF	; 255
    3284:	4f e7       	ldi	r20, 0x7F	; 127
    3286:	57 e4       	ldi	r21, 0x47	; 71
    3288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328c:	18 16       	cp	r1, r24
    328e:	4c f5       	brge	.+82     	; 0x32e2 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3290:	6d a9       	ldd	r22, Y+53	; 0x35
    3292:	7e a9       	ldd	r23, Y+54	; 0x36
    3294:	8f a9       	ldd	r24, Y+55	; 0x37
    3296:	98 ad       	ldd	r25, Y+56	; 0x38
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e2       	ldi	r20, 0x20	; 32
    329e:	51 e4       	ldi	r21, 0x41	; 65
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	98 ab       	std	Y+48, r25	; 0x30
    32b6:	8f a7       	std	Y+47, r24	; 0x2f
    32b8:	0f c0       	rjmp	.+30     	; 0x32d8 <main+0x7ae>
    32ba:	80 e9       	ldi	r24, 0x90	; 144
    32bc:	91 e0       	ldi	r25, 0x01	; 1
    32be:	9e a7       	std	Y+46, r25	; 0x2e
    32c0:	8d a7       	std	Y+45, r24	; 0x2d
    32c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    32c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <main+0x79c>
    32ca:	9e a7       	std	Y+46, r25	; 0x2e
    32cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d0:	98 a9       	ldd	r25, Y+48	; 0x30
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	98 ab       	std	Y+48, r25	; 0x30
    32d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32da:	98 a9       	ldd	r25, Y+48	; 0x30
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	69 f7       	brne	.-38     	; 0x32ba <main+0x790>
    32e0:	14 c0       	rjmp	.+40     	; 0x330a <main+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	69 a9       	ldd	r22, Y+49	; 0x31
    32e4:	7a a9       	ldd	r23, Y+50	; 0x32
    32e6:	8b a9       	ldd	r24, Y+51	; 0x33
    32e8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	98 ab       	std	Y+48, r25	; 0x30
    32f4:	8f a7       	std	Y+47, r24	; 0x2f
    32f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32f8:	98 a9       	ldd	r25, Y+48	; 0x30
    32fa:	9c a7       	std	Y+44, r25	; 0x2c
    32fc:	8b a7       	std	Y+43, r24	; 0x2b
    32fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3300:	9c a5       	ldd	r25, Y+44	; 0x2c
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <main+0x7d8>
    3306:	9c a7       	std	Y+44, r25	; 0x2c
    3308:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(30);
			if(GPIO_readPin(PORTD_ID, PIN4_ID) == LOGIC_LOW)
    330a:	83 e0       	ldi	r24, 0x03	; 3
    330c:	64 e0       	ldi	r22, 0x04	; 4
    330e:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    3312:	88 23       	and	r24, r24
    3314:	b9 f5       	brne	.+110    	; 0x3384 <main+0x85a>
			{
				if(!timerOn)
    3316:	fe 01       	movw	r30, r28
    3318:	ee 58       	subi	r30, 0x8E	; 142
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	88 23       	and	r24, r24
    3320:	f1 f4       	brne	.+60     	; 0x335e <main+0x834>
				{
					timerOn=TRUE;
    3322:	fe 01       	movw	r30, r28
    3324:	ee 58       	subi	r30, 0x8E	; 142
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 83       	st	Z, r24
					g_time=30;
    332c:	8e e1       	ldi	r24, 0x1E	; 30
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	90 93 8f 01 	sts	0x018F, r25
    3334:	80 93 8e 01 	sts	0x018E, r24
					Timer1_init(&Timer1_config);
    3338:	ce 01       	movw	r24, r28
    333a:	89 58       	subi	r24, 0x89	; 137
    333c:	9f 4f       	sbci	r25, 0xFF	; 255
    333e:	0e 94 87 1c 	call	0x390e	; 0x390e <Timer1_init>
					LCD_displayStringRowColumn(1, 12,"T:");
    3342:	2a e6       	ldi	r18, 0x6A	; 106
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	6c e0       	ldi	r22, 0x0C	; 12
    334a:	a9 01       	movw	r20, r18
    334c:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
					LCD_integerToString(g_time);
    3350:	80 91 8e 01 	lds	r24, 0x018E
    3354:	90 91 8f 01 	lds	r25, 0x018F
    3358:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_integerToString>
    335c:	13 c0       	rjmp	.+38     	; 0x3384 <main+0x85a>
				}
				else
				{
					timerOn=FALSE;
    335e:	fe 01       	movw	r30, r28
    3360:	ee 58       	subi	r30, 0x8E	; 142
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	10 82       	st	Z, r1
					g_time=30;
    3366:	8e e1       	ldi	r24, 0x1E	; 30
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	90 93 8f 01 	sts	0x018F, r25
    336e:	80 93 8e 01 	sts	0x018E, r24
					Timer1_deInit();
    3372:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <Timer1_deInit>
					LCD_displayStringRowColumn(1,12,"    ");
    3376:	2d e6       	ldi	r18, 0x6D	; 109
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	6c e0       	ldi	r22, 0x0C	; 12
    337e:	a9 01       	movw	r20, r18
    3380:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	a0 e2       	ldi	r26, 0x20	; 32
    338a:	b1 e4       	ldi	r27, 0x41	; 65
    338c:	8f a3       	std	Y+39, r24	; 0x27
    338e:	98 a7       	std	Y+40, r25	; 0x28
    3390:	a9 a7       	std	Y+41, r26	; 0x29
    3392:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3394:	6f a1       	ldd	r22, Y+39	; 0x27
    3396:	78 a5       	ldd	r23, Y+40	; 0x28
    3398:	89 a5       	ldd	r24, Y+41	; 0x29
    339a:	9a a5       	ldd	r25, Y+42	; 0x2a
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	4a e7       	ldi	r20, 0x7A	; 122
    33a2:	55 e4       	ldi	r21, 0x45	; 69
    33a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	8b a3       	std	Y+35, r24	; 0x23
    33ae:	9c a3       	std	Y+36, r25	; 0x24
    33b0:	ad a3       	std	Y+37, r26	; 0x25
    33b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33b4:	6b a1       	ldd	r22, Y+35	; 0x23
    33b6:	7c a1       	ldd	r23, Y+36	; 0x24
    33b8:	8d a1       	ldd	r24, Y+37	; 0x25
    33ba:	9e a1       	ldd	r25, Y+38	; 0x26
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c8:	88 23       	and	r24, r24
    33ca:	2c f4       	brge	.+10     	; 0x33d6 <main+0x8ac>
		__ticks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
    33d4:	3f c0       	rjmp	.+126    	; 0x3454 <main+0x92a>
	else if (__tmp > 65535)
    33d6:	6b a1       	ldd	r22, Y+35	; 0x23
    33d8:	7c a1       	ldd	r23, Y+36	; 0x24
    33da:	8d a1       	ldd	r24, Y+37	; 0x25
    33dc:	9e a1       	ldd	r25, Y+38	; 0x26
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	4c f5       	brge	.+82     	; 0x3440 <main+0x916>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	6f a1       	ldd	r22, Y+39	; 0x27
    33f0:	78 a5       	ldd	r23, Y+40	; 0x28
    33f2:	89 a5       	ldd	r24, Y+41	; 0x29
    33f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	9a a3       	std	Y+34, r25	; 0x22
    3414:	89 a3       	std	Y+33, r24	; 0x21
    3416:	0f c0       	rjmp	.+30     	; 0x3436 <main+0x90c>
    3418:	80 e9       	ldi	r24, 0x90	; 144
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	98 a3       	std	Y+32, r25	; 0x20
    341e:	8f 8f       	std	Y+31, r24	; 0x1f
    3420:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3422:	98 a1       	ldd	r25, Y+32	; 0x20
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <main+0x8fa>
    3428:	98 a3       	std	Y+32, r25	; 0x20
    342a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	89 a1       	ldd	r24, Y+33	; 0x21
    342e:	9a a1       	ldd	r25, Y+34	; 0x22
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9a a3       	std	Y+34, r25	; 0x22
    3434:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	89 a1       	ldd	r24, Y+33	; 0x21
    3438:	9a a1       	ldd	r25, Y+34	; 0x22
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	69 f7       	brne	.-38     	; 0x3418 <main+0x8ee>
    343e:	14 c0       	rjmp	.+40     	; 0x3468 <main+0x93e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3440:	6b a1       	ldd	r22, Y+35	; 0x23
    3442:	7c a1       	ldd	r23, Y+36	; 0x24
    3444:	8d a1       	ldd	r24, Y+37	; 0x25
    3446:	9e a1       	ldd	r25, Y+38	; 0x26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9a a3       	std	Y+34, r25	; 0x22
    3452:	89 a3       	std	Y+33, r24	; 0x21
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	9e 8f       	std	Y+30, r25	; 0x1e
    345a:	8d 8f       	std	Y+29, r24	; 0x1d
    345c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    345e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <main+0x936>
    3464:	9e 8f       	std	Y+30, r25	; 0x1e
    3466:	8d 8f       	std	Y+29, r24	; 0x1d
				}
			}
			_delay_ms(10);
		}

		if(timerOn)
    3468:	fe 01       	movw	r30, r28
    346a:	ee 58       	subi	r30, 0x8E	; 142
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 81       	ld	r24, Z
    3470:	88 23       	and	r24, r24
    3472:	09 f4       	brne	.+2      	; 0x3476 <main+0x94c>
    3474:	42 c1       	rjmp	.+644    	; 0x36fa <main+0xbd0>
		{
			LCD_moveCursor(1,14);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	6e e0       	ldi	r22, 0x0E	; 14
    347a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <LCD_moveCursor>
			LCD_integerToString(g_time);
    347e:	80 91 8e 01 	lds	r24, 0x018E
    3482:	90 91 8f 01 	lds	r25, 0x018F
    3486:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_integerToString>
			/* when D5 button pressed and the Timer is on increase time */
			if(GPIO_readPin(PORTD_ID, PIN5_ID) == LOGIC_LOW && g_time!=0)
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	65 e0       	ldi	r22, 0x05	; 5
    348e:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    3492:	88 23       	and	r24, r24
    3494:	09 f0       	breq	.+2      	; 0x3498 <main+0x96e>
    3496:	25 c1       	rjmp	.+586    	; 0x36e2 <main+0xbb8>
    3498:	80 91 8e 01 	lds	r24, 0x018E
    349c:	90 91 8f 01 	lds	r25, 0x018F
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <main+0x97c>
    34a4:	1e c1       	rjmp	.+572    	; 0x36e2 <main+0xbb8>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a0 ef       	ldi	r26, 0xF0	; 240
    34ac:	b1 e4       	ldi	r27, 0x41	; 65
    34ae:	89 8f       	std	Y+25, r24	; 0x19
    34b0:	9a 8f       	std	Y+26, r25	; 0x1a
    34b2:	ab 8f       	std	Y+27, r26	; 0x1b
    34b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	69 8d       	ldd	r22, Y+25	; 0x19
    34b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a e7       	ldi	r20, 0x7A	; 122
    34c4:	55 e4       	ldi	r21, 0x45	; 69
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8d 8b       	std	Y+21, r24	; 0x15
    34d0:	9e 8b       	std	Y+22, r25	; 0x16
    34d2:	af 8b       	std	Y+23, r26	; 0x17
    34d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <main+0x9ce>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9c 8b       	std	Y+20, r25	; 0x14
    34f4:	8b 8b       	std	Y+19, r24	; 0x13
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <main+0xa4c>
	else if (__tmp > 65535)
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <main+0xa38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	69 8d       	ldd	r22, Y+25	; 0x19
    3512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <main+0xa2e>
    353a:	80 e9       	ldi	r24, 0x90	; 144
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
    3542:	89 89       	ldd	r24, Y+17	; 0x11
    3544:	9a 89       	ldd	r25, Y+18	; 0x12
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <main+0xa1c>
    354a:	9a 8b       	std	Y+18, r25	; 0x12
    354c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8b 89       	ldd	r24, Y+19	; 0x13
    3550:	9c 89       	ldd	r25, Y+20	; 0x14
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9c 8b       	std	Y+20, r25	; 0x14
    3556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8b 89       	ldd	r24, Y+19	; 0x13
    355a:	9c 89       	ldd	r25, Y+20	; 0x14
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <main+0xa10>
    3560:	14 c0       	rjmp	.+40     	; 0x358a <main+0xa60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9c 8b       	std	Y+20, r25	; 0x14
    3574:	8b 8b       	std	Y+19, r24	; 0x13
    3576:	8b 89       	ldd	r24, Y+19	; 0x13
    3578:	9c 89       	ldd	r25, Y+20	; 0x14
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
    357e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3580:	98 89       	ldd	r25, Y+16	; 0x10
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <main+0xa58>
    3586:	98 8b       	std	Y+16, r25	; 0x10
    3588:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				if(GPIO_readPin(PORTD_ID, PIN5_ID) == LOGIC_LOW &g_time!=0)
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	65 e0       	ldi	r22, 0x05	; 5
    358e:	0e 94 9a 09 	call	0x1334	; 0x1334 <GPIO_readPin>
    3592:	ef 96       	adiw	r28, 0x3f	; 63
    3594:	1f ae       	std	Y+63, r1	; 0x3f
    3596:	ef 97       	sbiw	r28, 0x3f	; 63
    3598:	88 23       	and	r24, r24
    359a:	21 f4       	brne	.+8      	; 0x35a4 <main+0xa7a>
    359c:	f1 e0       	ldi	r31, 0x01	; 1
    359e:	ef 96       	adiw	r28, 0x3f	; 63
    35a0:	ff af       	std	Y+63, r31	; 0x3f
    35a2:	ef 97       	sbiw	r28, 0x3f	; 63
    35a4:	80 91 8e 01 	lds	r24, 0x018E
    35a8:	90 91 8f 01 	lds	r25, 0x018F
    35ac:	ee 96       	adiw	r28, 0x3e	; 62
    35ae:	1f ae       	std	Y+63, r1	; 0x3f
    35b0:	ee 97       	sbiw	r28, 0x3e	; 62
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	21 f0       	breq	.+8      	; 0x35be <main+0xa94>
    35b6:	21 e0       	ldi	r18, 0x01	; 1
    35b8:	ee 96       	adiw	r28, 0x3e	; 62
    35ba:	2f af       	std	Y+63, r18	; 0x3f
    35bc:	ee 97       	sbiw	r28, 0x3e	; 62
    35be:	ef 96       	adiw	r28, 0x3f	; 63
    35c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    35c2:	ef 97       	sbiw	r28, 0x3f	; 63
    35c4:	ee 96       	adiw	r28, 0x3e	; 62
    35c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    35c8:	ee 97       	sbiw	r28, 0x3e	; 62
    35ca:	89 23       	and	r24, r25
    35cc:	88 23       	and	r24, r24
    35ce:	b9 f0       	breq	.+46     	; 0x35fe <main+0xad4>
				{
					g_time+=30;
    35d0:	80 91 8e 01 	lds	r24, 0x018E
    35d4:	90 91 8f 01 	lds	r25, 0x018F
    35d8:	4e 96       	adiw	r24, 0x1e	; 30
    35da:	90 93 8f 01 	sts	0x018F, r25
    35de:	80 93 8e 01 	sts	0x018E, r24
					if(g_time == 300)
    35e2:	80 91 8e 01 	lds	r24, 0x018E
    35e6:	90 91 8f 01 	lds	r25, 0x018F
    35ea:	e1 e0       	ldi	r30, 0x01	; 1
    35ec:	8c 32       	cpi	r24, 0x2C	; 44
    35ee:	9e 07       	cpc	r25, r30
    35f0:	31 f4       	brne	.+12     	; 0x35fe <main+0xad4>
					{
						g_time=30;
    35f2:	8e e1       	ldi	r24, 0x1E	; 30
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	90 93 8f 01 	sts	0x018F, r25
    35fa:	80 93 8e 01 	sts	0x018E, r24
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	a0 e2       	ldi	r26, 0x20	; 32
    3604:	b1 e4       	ldi	r27, 0x41	; 65
    3606:	8b 87       	std	Y+11, r24	; 0x0b
    3608:	9c 87       	std	Y+12, r25	; 0x0c
    360a:	ad 87       	std	Y+13, r26	; 0x0d
    360c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3610:	7c 85       	ldd	r23, Y+12	; 0x0c
    3612:	8d 85       	ldd	r24, Y+13	; 0x0d
    3614:	9e 85       	ldd	r25, Y+14	; 0x0e
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a e7       	ldi	r20, 0x7A	; 122
    361c:	55 e4       	ldi	r21, 0x45	; 69
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8f 83       	std	Y+7, r24	; 0x07
    3628:	98 87       	std	Y+8, r25	; 0x08
    362a:	a9 87       	std	Y+9, r26	; 0x09
    362c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <main+0xb26>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <main+0xba4>
	else if (__tmp > 65535)
    3650:	6f 81       	ldd	r22, Y+7	; 0x07
    3652:	78 85       	ldd	r23, Y+8	; 0x08
    3654:	89 85       	ldd	r24, Y+9	; 0x09
    3656:	9a 85       	ldd	r25, Y+10	; 0x0a
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <main+0xb90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	6b 85       	ldd	r22, Y+11	; 0x0b
    366a:	7c 85       	ldd	r23, Y+12	; 0x0c
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9e 83       	std	Y+6, r25	; 0x06
    368e:	8d 83       	std	Y+5, r24	; 0x05
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <main+0xb86>
    3692:	80 e9       	ldi	r24, 0x90	; 144
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	9c 83       	std	Y+4, r25	; 0x04
    3698:	8b 83       	std	Y+3, r24	; 0x03
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	9c 81       	ldd	r25, Y+4	; 0x04
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <main+0xb74>
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	9e 81       	ldd	r25, Y+6	; 0x06
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9e 83       	std	Y+6, r25	; 0x06
    36ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <main+0xb68>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <main+0xbb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6f 81       	ldd	r22, Y+7	; 0x07
    36bc:	78 85       	ldd	r23, Y+8	; 0x08
    36be:	89 85       	ldd	r24, Y+9	; 0x09
    36c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <main+0xbb0>
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
				}
				_delay_ms(10);
			}

			/* stop motor when time reach 0 */
			if(g_time == 0)
    36e2:	80 91 8e 01 	lds	r24, 0x018E
    36e6:	90 91 8f 01 	lds	r25, 0x018F
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	31 f4       	brne	.+12     	; 0x36fa <main+0xbd0>
			{
				speed = 0;
    36ee:	fe 01       	movw	r30, r28
    36f0:	ed 58       	subi	r30, 0x8D	; 141
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	10 82       	st	Z, r1
				Timer1_deInit();
    36f6:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <Timer1_deInit>
			}
		}

		/* get sensor temperature */
		T=LM35_getTemperature();
    36fa:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <LM35_getTemperature>
    36fe:	fe 01       	movw	r30, r28
    3700:	ef 58       	subi	r30, 0x8F	; 143
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 83       	st	Z, r24
		/* display the temperature on the LCD */
		LCD_displayStringRowColumn(1,0,"Temp = ");
    3706:	22 e7       	ldi	r18, 0x72	; 114
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	a9 01       	movw	r20, r18
    3710:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
		if(T < 10)
    3714:	fe 01       	movw	r30, r28
    3716:	ef 58       	subi	r30, 0x8F	; 143
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	80 81       	ld	r24, Z
    371c:	8a 30       	cpi	r24, 0x0A	; 10
    371e:	68 f4       	brcc	.+26     	; 0x373a <main+0xc10>
		{
			LCD_integerToString(T);
    3720:	fe 01       	movw	r30, r28
    3722:	ef 58       	subi	r30, 0x8F	; 143
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_integerToString>
			LCD_displayString(" C");
    3730:	8a e7       	ldi	r24, 0x7A	; 122
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	0e 94 aa 14 	call	0x2954	; 0x2954 <LCD_displayString>
    3738:	11 c0       	rjmp	.+34     	; 0x375c <main+0xc32>
		}
		else if(T < 100)
    373a:	fe 01       	movw	r30, r28
    373c:	ef 58       	subi	r30, 0x8F	; 143
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 81       	ld	r24, Z
    3742:	84 36       	cpi	r24, 0x64	; 100
    3744:	58 f4       	brcc	.+22     	; 0x375c <main+0xc32>
		{
			LCD_integerToString(T);
    3746:	fe 01       	movw	r30, r28
    3748:	ef 58       	subi	r30, 0x8F	; 143
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 81       	ld	r24, Z
    374e:	88 2f       	mov	r24, r24
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_integerToString>
			LCD_displayCharacter('C');
    3756:	83 e4       	ldi	r24, 0x43	; 67
    3758:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
		}
		if(mode == AUTOMATIC && g_time != 0)
    375c:	fe 01       	movw	r30, r28
    375e:	ec 58       	subi	r30, 0x8C	; 140
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	81 30       	cpi	r24, 0x01	; 1
    3766:	91 f4       	brne	.+36     	; 0x378c <main+0xc62>
    3768:	80 91 8e 01 	lds	r24, 0x018E
    376c:	90 91 8f 01 	lds	r25, 0x018F
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	61 f0       	breq	.+24     	; 0x378c <main+0xc62>
		{
			/* control speed based on temperature */
			/* speed increases every 20 degrees */
			speed = T/20;
    3774:	de 01       	movw	r26, r28
    3776:	ad 58       	subi	r26, 0x8D	; 141
    3778:	bf 4f       	sbci	r27, 0xFF	; 255
    377a:	fe 01       	movw	r30, r28
    377c:	ef 58       	subi	r30, 0x8F	; 143
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	94 e1       	ldi	r25, 0x14	; 20
    3784:	69 2f       	mov	r22, r25
    3786:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__udivmodqi4>
    378a:	8c 93       	st	X, r24
		}
		/* rotate motor with desired speed */
		DcMotor_Rotate(CW, speed * 25);
    378c:	fe 01       	movw	r30, r28
    378e:	ed 58       	subi	r30, 0x8D	; 141
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	80 81       	ld	r24, Z
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	c9 01       	movw	r24, r18
    379a:	88 0f       	add	r24, r24
    379c:	99 1f       	adc	r25, r25
    379e:	82 0f       	add	r24, r18
    37a0:	93 1f       	adc	r25, r19
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	82 0f       	add	r24, r18
    37b0:	93 1f       	adc	r25, r19
    37b2:	98 2f       	mov	r25, r24
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	69 2f       	mov	r22, r25
    37b8:	0e 94 7f 07 	call	0xefe	; 0xefe <DcMotor_Rotate>
		/* display speed */
		LCD_displayStringRowColumn(0, 4, "Speed : ");
    37bc:	2d e7       	ldi	r18, 0x7D	; 125
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	64 e0       	ldi	r22, 0x04	; 4
    37c4:	a9 01       	movw	r20, r18
    37c6:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_displayStringRowColumn>
		LCD_displayCharacter(speed+'0');
    37ca:	fe 01       	movw	r30, r28
    37cc:	ed 58       	subi	r30, 0x8D	; 141
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	80 5d       	subi	r24, 0xD0	; 208
    37d4:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_displayCharacter>
    37d8:	18 ca       	rjmp	.-3024   	; 0x2c0a <main+0xe0>

000037da <timerTick>:
/*
 * Description :
 * call back function for Timer1 to act as the Interrupt Service Routine
 */
void timerTick()
{
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
	g_time--;
    37e2:	80 91 8e 01 	lds	r24, 0x018E
    37e6:	90 91 8f 01 	lds	r25, 0x018F
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	90 93 8f 01 	sts	0x018F, r25
    37f0:	80 93 8e 01 	sts	0x018E, r24
}
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <PWM_Timer0_Start>:
 * initialize timer0 with non-inverting PWM mode
 * setup duty cycle
 * generate 500hz frequency
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	0f 92       	push	r0
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
    3804:	89 83       	std	Y+1, r24	; 0x01
	/* setup OC0 pin as output */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	63 e0       	ldi	r22, 0x03	; 3
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 c4 07 	call	0xf88	; 0xf88 <GPIO_setupPinDirection>
	/* select non-inverting fast PWM mode with prescaler F_CPU/8 */
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS02);
    3810:	e3 e5       	ldi	r30, 0x53	; 83
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	8c e6       	ldi	r24, 0x6C	; 108
    3816:	80 83       	st	Z, r24
	TCNT0=0;
    3818:	e2 e5       	ldi	r30, 0x52	; 82
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	10 82       	st	Z, r1
	OCR0=((uint16)duty_cycle * 255) / 100;
    381e:	ec e5       	ldi	r30, 0x5C	; 92
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	48 2f       	mov	r20, r24
    3826:	50 e0       	ldi	r21, 0x00	; 0
    3828:	ca 01       	movw	r24, r20
    382a:	9c 01       	movw	r18, r24
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	c9 01       	movw	r24, r18
    3832:	96 95       	lsr	r25
    3834:	98 2f       	mov	r25, r24
    3836:	88 27       	eor	r24, r24
    3838:	97 95       	ror	r25
    383a:	87 95       	ror	r24
    383c:	82 1b       	sub	r24, r18
    383e:	93 0b       	sbc	r25, r19
    3840:	84 0f       	add	r24, r20
    3842:	95 1f       	adc	r25, r21
    3844:	24 e6       	ldi	r18, 0x64	; 100
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	b9 01       	movw	r22, r18
    384a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <__udivmodhi4>
    384e:	cb 01       	movw	r24, r22
    3850:	80 83       	st	Z, r24
}
    3852:	0f 90       	pop	r0
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <__vector_7>:
 * 						  Interrupt Service Routines
 *******************************************************************************/
static void  (*g_callBack)(void);
/* ISR for compare match interrupt */
ISR(TIMER1_COMPA_vect)
{
    385a:	1f 92       	push	r1
    385c:	0f 92       	push	r0
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	0f 92       	push	r0
    3862:	11 24       	eor	r1, r1
    3864:	2f 93       	push	r18
    3866:	3f 93       	push	r19
    3868:	4f 93       	push	r20
    386a:	5f 93       	push	r21
    386c:	6f 93       	push	r22
    386e:	7f 93       	push	r23
    3870:	8f 93       	push	r24
    3872:	9f 93       	push	r25
    3874:	af 93       	push	r26
    3876:	bf 93       	push	r27
    3878:	ef 93       	push	r30
    387a:	ff 93       	push	r31
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    3884:	e0 91 90 01 	lds	r30, 0x0190
    3888:	f0 91 91 01 	lds	r31, 0x0191
    388c:	09 95       	icall
}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	ff 91       	pop	r31
    3894:	ef 91       	pop	r30
    3896:	bf 91       	pop	r27
    3898:	af 91       	pop	r26
    389a:	9f 91       	pop	r25
    389c:	8f 91       	pop	r24
    389e:	7f 91       	pop	r23
    38a0:	6f 91       	pop	r22
    38a2:	5f 91       	pop	r21
    38a4:	4f 91       	pop	r20
    38a6:	3f 91       	pop	r19
    38a8:	2f 91       	pop	r18
    38aa:	0f 90       	pop	r0
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	0f 90       	pop	r0
    38b0:	1f 90       	pop	r1
    38b2:	18 95       	reti

000038b4 <__vector_9>:
/* ISR for overflow interrupt */
ISR(TIMER1_OVF_vect)
{
    38b4:	1f 92       	push	r1
    38b6:	0f 92       	push	r0
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	0f 92       	push	r0
    38bc:	11 24       	eor	r1, r1
    38be:	2f 93       	push	r18
    38c0:	3f 93       	push	r19
    38c2:	4f 93       	push	r20
    38c4:	5f 93       	push	r21
    38c6:	6f 93       	push	r22
    38c8:	7f 93       	push	r23
    38ca:	8f 93       	push	r24
    38cc:	9f 93       	push	r25
    38ce:	af 93       	push	r26
    38d0:	bf 93       	push	r27
    38d2:	ef 93       	push	r30
    38d4:	ff 93       	push	r31
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    38de:	e0 91 90 01 	lds	r30, 0x0190
    38e2:	f0 91 91 01 	lds	r31, 0x0191
    38e6:	09 95       	icall
}
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	ff 91       	pop	r31
    38ee:	ef 91       	pop	r30
    38f0:	bf 91       	pop	r27
    38f2:	af 91       	pop	r26
    38f4:	9f 91       	pop	r25
    38f6:	8f 91       	pop	r24
    38f8:	7f 91       	pop	r23
    38fa:	6f 91       	pop	r22
    38fc:	5f 91       	pop	r21
    38fe:	4f 91       	pop	r20
    3900:	3f 91       	pop	r19
    3902:	2f 91       	pop	r18
    3904:	0f 90       	pop	r0
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	0f 90       	pop	r0
    390a:	1f 90       	pop	r1
    390c:	18 95       	reti

0000390e <Timer1_init>:
/*
 * Description :
 * a function to initiate timer1 with desired configuration(prescaler, mode, initial register values)
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	00 d0       	rcall	.+0      	; 0x3914 <Timer1_init+0x6>
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	9a 83       	std	Y+2, r25	; 0x02
    391a:	89 83       	std	Y+1, r24	; 0x01
	/* initializing timer 1 counter register */
	TCNT1 = Config_Ptr->initial_value;
    391c:	ac e4       	ldi	r26, 0x4C	; 76
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e9 81       	ldd	r30, Y+1	; 0x01
    3922:	fa 81       	ldd	r31, Y+2	; 0x02
    3924:	80 81       	ld	r24, Z
    3926:	91 81       	ldd	r25, Z+1	; 0x01
    3928:	11 96       	adiw	r26, 0x01	; 1
    392a:	9c 93       	st	X, r25
    392c:	8e 93       	st	-X, r24
	/* initializing compare register if compare mode specified */
	if(Config_Ptr->mode == COMPARE)
    392e:	e9 81       	ldd	r30, Y+1	; 0x01
    3930:	fa 81       	ldd	r31, Y+2	; 0x02
    3932:	85 81       	ldd	r24, Z+5	; 0x05
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	89 f4       	brne	.+34     	; 0x395a <Timer1_init+0x4c>
	{
		OCR1A = Config_Ptr->compare_value;
    3938:	aa e4       	ldi	r26, 0x4A	; 74
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e9 81       	ldd	r30, Y+1	; 0x01
    393e:	fa 81       	ldd	r31, Y+2	; 0x02
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	11 96       	adiw	r26, 0x01	; 1
    3946:	9c 93       	st	X, r25
    3948:	8e 93       	st	-X, r24
		/* enable compare match interrupt */
		TIMSK|=(1<<OCIE1A);
    394a:	a9 e5       	ldi	r26, 0x59	; 89
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	e9 e5       	ldi	r30, 0x59	; 89
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	80 61       	ori	r24, 0x10	; 16
    3956:	8c 93       	st	X, r24
    3958:	07 c0       	rjmp	.+14     	; 0x3968 <Timer1_init+0x5a>
	}
	else
	{
		/* enable overflow interrupt */
		TIMSK|=(1<<TOIE1);
    395a:	a9 e5       	ldi	r26, 0x59	; 89
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	e9 e5       	ldi	r30, 0x59	; 89
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	84 60       	ori	r24, 0x04	; 4
    3966:	8c 93       	st	X, r24
	}
	/* set FOC1A to 1 for non_PWM mode */
	TCCR1A|=(1<<FOC1A);
    3968:	af e4       	ldi	r26, 0x4F	; 79
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	ef e4       	ldi	r30, 0x4F	; 79
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	88 60       	ori	r24, 0x08	; 8
    3974:	8c 93       	st	X, r24
	/* set prescaler and choose mode of operation */
	/* note : WGM!0 and WGM11 are set to 0 in both normal and compare mode */
	TCCR1B= Config_Ptr->prescaler | (Config_Ptr->mode<<WGM12);
    3976:	ae e4       	ldi	r26, 0x4E	; 78
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e9 81       	ldd	r30, Y+1	; 0x01
    397c:	fa 81       	ldd	r31, Y+2	; 0x02
    397e:	84 81       	ldd	r24, Z+4	; 0x04
    3980:	28 2f       	mov	r18, r24
    3982:	e9 81       	ldd	r30, Y+1	; 0x01
    3984:	fa 81       	ldd	r31, Y+2	; 0x02
    3986:	85 81       	ldd	r24, Z+5	; 0x05
    3988:	88 2f       	mov	r24, r24
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	82 2b       	or	r24, r18
    399a:	8c 93       	st	X, r24
}
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <Timer1_deInit>:
/*
 * Description :
 * a function to deactivate timer1
 */
void Timer1_deInit(void)
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    39ae:	ef e4       	ldi	r30, 0x4F	; 79
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	10 82       	st	Z, r1
	TCCR1B=0;
    39b4:	ee e4       	ldi	r30, 0x4E	; 78
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	10 82       	st	Z, r1
}
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <Timer1_setCallBack>:
/*
 * Description :
 * a function to set the call back function pointer
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <Timer1_setCallBack+0x6>
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=a_ptr;
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	90 93 91 01 	sts	0x0191, r25
    39d6:	80 93 90 01 	sts	0x0190, r24
}
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <__mulsi3>:
    39e4:	62 9f       	mul	r22, r18
    39e6:	d0 01       	movw	r26, r0
    39e8:	73 9f       	mul	r23, r19
    39ea:	f0 01       	movw	r30, r0
    39ec:	82 9f       	mul	r24, r18
    39ee:	e0 0d       	add	r30, r0
    39f0:	f1 1d       	adc	r31, r1
    39f2:	64 9f       	mul	r22, r20
    39f4:	e0 0d       	add	r30, r0
    39f6:	f1 1d       	adc	r31, r1
    39f8:	92 9f       	mul	r25, r18
    39fa:	f0 0d       	add	r31, r0
    39fc:	83 9f       	mul	r24, r19
    39fe:	f0 0d       	add	r31, r0
    3a00:	74 9f       	mul	r23, r20
    3a02:	f0 0d       	add	r31, r0
    3a04:	65 9f       	mul	r22, r21
    3a06:	f0 0d       	add	r31, r0
    3a08:	99 27       	eor	r25, r25
    3a0a:	72 9f       	mul	r23, r18
    3a0c:	b0 0d       	add	r27, r0
    3a0e:	e1 1d       	adc	r30, r1
    3a10:	f9 1f       	adc	r31, r25
    3a12:	63 9f       	mul	r22, r19
    3a14:	b0 0d       	add	r27, r0
    3a16:	e1 1d       	adc	r30, r1
    3a18:	f9 1f       	adc	r31, r25
    3a1a:	bd 01       	movw	r22, r26
    3a1c:	cf 01       	movw	r24, r30
    3a1e:	11 24       	eor	r1, r1
    3a20:	08 95       	ret

00003a22 <__udivmodqi4>:
    3a22:	99 1b       	sub	r25, r25
    3a24:	79 e0       	ldi	r23, 0x09	; 9
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <__udivmodqi4_ep>

00003a28 <__udivmodqi4_loop>:
    3a28:	99 1f       	adc	r25, r25
    3a2a:	96 17       	cp	r25, r22
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <__udivmodqi4_ep>
    3a2e:	96 1b       	sub	r25, r22

00003a30 <__udivmodqi4_ep>:
    3a30:	88 1f       	adc	r24, r24
    3a32:	7a 95       	dec	r23
    3a34:	c9 f7       	brne	.-14     	; 0x3a28 <__udivmodqi4_loop>
    3a36:	80 95       	com	r24
    3a38:	08 95       	ret

00003a3a <__udivmodhi4>:
    3a3a:	aa 1b       	sub	r26, r26
    3a3c:	bb 1b       	sub	r27, r27
    3a3e:	51 e1       	ldi	r21, 0x11	; 17
    3a40:	07 c0       	rjmp	.+14     	; 0x3a50 <__udivmodhi4_ep>

00003a42 <__udivmodhi4_loop>:
    3a42:	aa 1f       	adc	r26, r26
    3a44:	bb 1f       	adc	r27, r27
    3a46:	a6 17       	cp	r26, r22
    3a48:	b7 07       	cpc	r27, r23
    3a4a:	10 f0       	brcs	.+4      	; 0x3a50 <__udivmodhi4_ep>
    3a4c:	a6 1b       	sub	r26, r22
    3a4e:	b7 0b       	sbc	r27, r23

00003a50 <__udivmodhi4_ep>:
    3a50:	88 1f       	adc	r24, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	5a 95       	dec	r21
    3a56:	a9 f7       	brne	.-22     	; 0x3a42 <__udivmodhi4_loop>
    3a58:	80 95       	com	r24
    3a5a:	90 95       	com	r25
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	08 95       	ret

00003a62 <__prologue_saves__>:
    3a62:	2f 92       	push	r2
    3a64:	3f 92       	push	r3
    3a66:	4f 92       	push	r4
    3a68:	5f 92       	push	r5
    3a6a:	6f 92       	push	r6
    3a6c:	7f 92       	push	r7
    3a6e:	8f 92       	push	r8
    3a70:	9f 92       	push	r9
    3a72:	af 92       	push	r10
    3a74:	bf 92       	push	r11
    3a76:	cf 92       	push	r12
    3a78:	df 92       	push	r13
    3a7a:	ef 92       	push	r14
    3a7c:	ff 92       	push	r15
    3a7e:	0f 93       	push	r16
    3a80:	1f 93       	push	r17
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	ca 1b       	sub	r28, r26
    3a8c:	db 0b       	sbc	r29, r27
    3a8e:	0f b6       	in	r0, 0x3f	; 63
    3a90:	f8 94       	cli
    3a92:	de bf       	out	0x3e, r29	; 62
    3a94:	0f be       	out	0x3f, r0	; 63
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	09 94       	ijmp

00003a9a <__epilogue_restores__>:
    3a9a:	2a 88       	ldd	r2, Y+18	; 0x12
    3a9c:	39 88       	ldd	r3, Y+17	; 0x11
    3a9e:	48 88       	ldd	r4, Y+16	; 0x10
    3aa0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aa2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aa4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3aa8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3aaa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3aac:	b9 84       	ldd	r11, Y+9	; 0x09
    3aae:	c8 84       	ldd	r12, Y+8	; 0x08
    3ab0:	df 80       	ldd	r13, Y+7	; 0x07
    3ab2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ab6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ab8:	1b 81       	ldd	r17, Y+3	; 0x03
    3aba:	aa 81       	ldd	r26, Y+2	; 0x02
    3abc:	b9 81       	ldd	r27, Y+1	; 0x01
    3abe:	ce 0f       	add	r28, r30
    3ac0:	d1 1d       	adc	r29, r1
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	ed 01       	movw	r28, r26
    3ace:	08 95       	ret

00003ad0 <itoa>:
    3ad0:	fb 01       	movw	r30, r22
    3ad2:	9f 01       	movw	r18, r30
    3ad4:	e8 94       	clt
    3ad6:	42 30       	cpi	r20, 0x02	; 2
    3ad8:	c4 f0       	brlt	.+48     	; 0x3b0a <itoa+0x3a>
    3ada:	45 32       	cpi	r20, 0x25	; 37
    3adc:	b4 f4       	brge	.+44     	; 0x3b0a <itoa+0x3a>
    3ade:	4a 30       	cpi	r20, 0x0A	; 10
    3ae0:	29 f4       	brne	.+10     	; 0x3aec <itoa+0x1c>
    3ae2:	97 fb       	bst	r25, 7
    3ae4:	1e f4       	brtc	.+6      	; 0x3aec <itoa+0x1c>
    3ae6:	90 95       	com	r25
    3ae8:	81 95       	neg	r24
    3aea:	9f 4f       	sbci	r25, 0xFF	; 255
    3aec:	64 2f       	mov	r22, r20
    3aee:	77 27       	eor	r23, r23
    3af0:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <__udivmodhi4>
    3af4:	80 5d       	subi	r24, 0xD0	; 208
    3af6:	8a 33       	cpi	r24, 0x3A	; 58
    3af8:	0c f0       	brlt	.+2      	; 0x3afc <itoa+0x2c>
    3afa:	89 5d       	subi	r24, 0xD9	; 217
    3afc:	81 93       	st	Z+, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	a1 f7       	brne	.-24     	; 0x3aec <itoa+0x1c>
    3b04:	16 f4       	brtc	.+4      	; 0x3b0a <itoa+0x3a>
    3b06:	5d e2       	ldi	r21, 0x2D	; 45
    3b08:	51 93       	st	Z+, r21
    3b0a:	10 82       	st	Z, r1
    3b0c:	c9 01       	movw	r24, r18
    3b0e:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <strrev>

00003b12 <strrev>:
    3b12:	dc 01       	movw	r26, r24
    3b14:	fc 01       	movw	r30, r24
    3b16:	67 2f       	mov	r22, r23
    3b18:	71 91       	ld	r23, Z+
    3b1a:	77 23       	and	r23, r23
    3b1c:	e1 f7       	brne	.-8      	; 0x3b16 <strrev+0x4>
    3b1e:	32 97       	sbiw	r30, 0x02	; 2
    3b20:	04 c0       	rjmp	.+8      	; 0x3b2a <strrev+0x18>
    3b22:	7c 91       	ld	r23, X
    3b24:	6d 93       	st	X+, r22
    3b26:	70 83       	st	Z, r23
    3b28:	62 91       	ld	r22, -Z
    3b2a:	ae 17       	cp	r26, r30
    3b2c:	bf 07       	cpc	r27, r31
    3b2e:	c8 f3       	brcs	.-14     	; 0x3b22 <strrev+0x10>
    3b30:	08 95       	ret

00003b32 <_exit>:
    3b32:	f8 94       	cli

00003b34 <__stop_program>:
    3b34:	ff cf       	rjmp	.-2      	; 0x3b34 <__stop_program>
